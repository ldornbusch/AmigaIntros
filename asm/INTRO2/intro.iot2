>EXTERN "intros:intros/intro2/logo.iot2",pic
>EXTERN "intros:intros/intro2/tube.iot2",tube
>EXTERN "intros:intros/intro2/glas.iot2",font
>EXTERN "intros:songs/song2",mt_data
dmacon:		equ	$096
bltapth:	equ	$050
bltbpth:	equ	$04c
bltcpth:	equ	$048
bltdpth:	equ	$054
bltamod:	equ	$064
bltbmod:	equ	$062
bltcmod:	equ	$060
bltdmod:	equ	$066
bltcon0:	equ	$040
bltcon1:	equ	$042
bltafwm:	equ	$044
bltalwm:	equ	$046
bltsize:	equ	$058
forbid:		equ	-$084
permit:		equ	-$08a
openlib:	equ	-$228
closelib:	equ	-$19e
execbase:	equ	$4

main:
	move.l	#$ffffffff,d0
waitloop:
	move.l	#$5,d1
waitloop2:dbra	d1,waitloop2
dbra	d0,waitloop

	move.l	execbase,a6
	jsr	forbid(a6)

	move.l	execbase,a6
	lea 	gfxname,a1
	move.l	#0,d0
	jsr	openlib(a6)
	move.l	d0,gfxbase

	move.l	gfxbase,a0
	move.l	38(a0),oldcopper
	move.w	#$0080,$dff096
	move.l	#newcopper,$DFF080
	move.w	#$8080,$dff096


	bsr	mt_init
	bsr	INITLOGO
	bsr	INITBARCOLOR
	bsr	INITTUBE
	lea	scrollstruct2,a0
	jsr	initdualdisplay

	move.w	#$4020,$dff09a
	move.l	$6c,oldirq+2
	move.l	#MYIRQ,$6c
	move.w	#$c020,$dff09a

mouse:
	btst	#6,$bfe001
bne	mouse

	move.w	#$4020,$dff09a
	move.l	oldirq+2,$6c
	move.w	#$c020,$dff09a

	bsr	mt_end

	move.l	gfxbase,a0
	move.w	#$0080,$dff096
	move.l	oldcopper,$DFF080
	move.w	#$8080,$dff096

	move.l	gfxbase,a1
	move.l	execbase,a6
	jsr	closelib(a6)

	move.l	execbase,a6
	jsr	permit(a6)
rts


MYIRQ:
	lea	tubestr,a0
	add.l	#40,6(a0)	;add 1 zeile
	add.l	#1,tubezahl
	btst	#10,$dff016
	bne	tubevergleich
	sub.l	#80,6(a0)	;sub 2 zeilen
	sub.l	#2,tubezahl
	cmp.l	#0,tubezahl
	beq	tubebackbackset
tubevergleich:
	cmp.l	#276,tubezahl	;zeile 276 erreicht ?
	beq	tubebegin
tuberaus:
	bsr	initdisplay

	lea	scroller1,a0
	bsr	scrollround
	lea	scroller2,a0
	bsr	scrollround


	move.w	scrollstatus,d0
	cmp.w	#1,d0		;1=1.scr up
	beq	andersrum
	lea	scrollstruct2,a0
	add.l	#50,10(a0)
	sub.l	#50,22(a0)
	add.l	#1,scrollzahler
	cmp.l	#70,scrollzahler
	bne	scrollneu
	move.w	#$0000,scrollpri
	move.w	#1,scrollstatus
	jmp	scrollneu
andersrum:
	lea	scrollstruct2,a0
	add.l	#50,22(a0)
	sub.l	#50,10(a0)
	sub.l	#1,scrollzahler
	cmp.l	#0,scrollzahler
	bne	scrollneu
	move.w	#$0040,scrollpri
	move.w	#0,scrollstatus
scrollneu:
	lea	scrollstruct2,a0
	bsr	initdualdisplay

	move.l	#sprite3,$DFF120
	move.l	#sprite3,$DFF124
	move.l	#sprite3,$DFF128
	move.l	#sprite3,$DFF12c
	move.l	#sprite3,$DFF130
	move.l	#sprite3,$DFF134
	move.l	#sprite3,$DFF138
	move.l	#sprite3,$DFF13c

	bsr	wabblegen
	lea	logocop,a0
	bsr	copmerge
	bsr	BARHOPP

	bsr	mt_music

	move.b	$bfec01,d0	;***********************
	not.b	d0		;*      KEY TEST       *
	ror.b	#1,d0		;* NOTen und rechtsrot *
				;***********************
	cmp.b	#$64,d0
	beq	subabstand	; left ALT-key
	cmp.b	#$65,d0
	beq	addabstand	; right ALT-key
	cmp.b	#$66,d0
	beq	subbar		; left AMIGA-key
	cmp.b	#$67,d0
	beq	addbar		; right AMIGA-key
	cmp.b	#$4e,d0		;--> Key
	beq	slower1
	cmp.b	#$4f,d0		;<-- Key
	beq	faster1
	cmp.b	#$61,d0		;right SHIFT-Key
	beq	slower2
	cmp.b	#$60,d0		;left SHIFT-Key
	beq	faster2


irqend:
	move.w	#$4020,$dff09c
OLDIRQ:
JMP	$00000000

tubebegin:
	move.l	#tube,6(a0)
	move.l	#0,tubezahl
jmp	tuberaus

tubebackbackset:
	lea	tubestr,a0
	move.l	#275,tubezahl
	move.l	#tube+11000,6(a0)
jmp	tubevergleich

wabblegen:
	move.l	#0,d0
	move.b	wabblecount,d0
	cmp.b	#60,d0
	beq	wabblezero
wabbleback:
	add.b	#2,d0
	move.b	d0,wabblecount
	lea	wabbledat,a0
	add.l	d0,a0
	lea	wabble,a1
	move.l	#0,d0
	move.l	#127,d1
wibbwobb:
	move.w	(a0)+,d0
	cmp.w	#0,d0		;end of wabbledats ?
	beq	wibbwobbzero
wibbwobbback:
	move.w	d0,(a1)+
dbra	d1,wibbwobb

rts

wabblezero:
	move.b	#0,d0
	move.b	d0,wabblecount
jmp	wabbleback

wibbwobbzero:
	lea	wabbledat,a0
	move.w	(a0)+,d0
jmp	wibbwobbback



BARHOPP:
	lea	BARS,a0
	move.l	#127,d0
clearbars:
	move.w	#0,(a0)+
dbra	d0,clearbars

	move.l	#0,d0
	move.b	sinuscount,d0
	cmp.b	#157,d0
	beq	sinuszero
sinusweiter:
	add.b	#1,d0
	move.b	d0,sinuscount
	lea	SINUS,a0
	move.b	sinuscount,d0
	add.l	d0,a0
	lea	BARCOL,a2	;barcolor in a2
	move.l	baranzahl,d2		;ANZAHL der BARS
bargen:
	lea	BARS,a1
	move.b	(a0),d0		;y-pointer in d0
	add.b	#20,d0		;add 20 in yko
	mulu	#2,d0		; mul mit 2(words)
	add.l	d0,a1		; add y-ko in barpointer
	add.l	barabstand,a0	; ABSTAND der BARS

	move.l	#9,d1		;anzahl der farben pro bar
barcolors:
	move.w	(a2)+,(a1)+
dbra	d1,barcolors
dbra	d2,bargen
rts


sinuszero:
	move.b	#0,d0
jmp	sinusweiter

subbar:
	sub.l	#1,baranzahl
	cmp.l	#-1,baranzahl
	bne	irqend
	move.l	#0,baranzahl
jmp	irqend

addbar:
	add.l	#1,baranzahl
	cmp.l	#14,baranzahl
	bne	irqend
	move.l	#13,baranzahl
jmp	irqend

subabstand:
	sub.l	#1,barabstand
	cmp.l	#-1,barabstand
	bne	irqend
	move.l	#0,barabstand
jmp	irqend

addabstand:
	add.l	#1,barabstand
	cmp.l	#11,barabstand
	bne	irqend
	move.l	#10,barabstand
jmp	irqend

slower1:
	move.w	scrollspeed1,d0
	cmp.w	#0,d0
	beq	irqend
	sub.w	#4,d0
	move.w	d0,scrollspeed1
	lea	scroller1,a0
	lea	scrolltab,a1
	add.l	d0,a1
	move.w	(a1)+,32(a0)
	move.w	(a1)+,22(a0)
jmp	irqend

faster1:
	move.w	scrollspeed1,d0
	cmp.w	#12,d0
	beq	irqend
	add.w	#4,d0
	move.w	d0,scrollspeed1
	lea	scroller1,a0
	lea	scrolltab,a1
	add.l	d0,a1
	move.w	(a1)+,32(a0)
	move.w	(a1)+,22(a0)
jmp	irqend

slower2:
	move.w	scrollspeed2,d0
	cmp.w	#0,d0
	beq	irqend
	sub.w	#4,d0
	move.w	d0,scrollspeed2
	lea	scroller2,a0
	lea	scrolltab,a1
	add.l	d0,a1
	move.w	(a1)+,32(a0)
	move.w	(a1)+,22(a0)
jmp	irqend

faster2:
	move.w	scrollspeed2,d0
	cmp.w	#12,d0		;Full speed?
	beq	irqend
	add.w	#4,d0
	move.w	d0,scrollspeed2
	lea	scroller2,a0
	lea	scrolltab,a1
	add.l	d0,a1
	move.w	(a1)+,32(a0)
	move.w	(a1)+,22(a0)
jmp	irqend

;****************************************************
;*                     Subroutinen                  *
;****************************************************

INITLOGO:
	lea	display,a0
	jsr	initdisplay

	move.l	#31,d0
	lea	colors,a0
	lea	pic,a1
	add.l	#17000,a1
	jsr	setcolor

	lea	logocol,a0
	move.w	#$0000,d0
	move.w	#$0000,d1
	move.w	#47,d2
	bsr	fadein
	move.w	#$0000,d0
	move.w	#$0001,d1
	move.w	#15,d2
	bsr	fadein
	move.w	#$000f,d0
	move.w	#$0110,d1
	move.w	#15,d2
	bsr	fadein
	move.w	#$0fff,d0
	move.w	#$0000,d1
	move.w	#9,d2
	bsr	fadein
	move.w	#$0fff,d0
	move.w	#$0011,d1
	move.w	#15,d2
	bsr	fadeout
	move.w	#$0f00,d0
	move.w	#$0100,d1
	move.w	#15,d2
	bsr	fadeout
	move.w	#$0000,d0
	move.w	#$0000,d1
	move.w	#2,d2
	bsr	fadeout


	lea	logocop,a0
	bsr	COPMERGE
rts

initbarcolor:
	lea	barcol,a0
	move.w	#$0000,d0
	move.w	#$0300,d1
	move.w	#4,d2
	bsr	fadein
	move.w	#$0f00,d0
	move.w	#$0300,d1
	move.w	#4,d2
	bsr	fadeout

	move.w	#$0000,d0
	move.w	#$0330,d1
	move.w	#4,d2
	bsr	fadein
	move.w	#$0ff0,d0
	move.w	#$0330,d1
	move.w	#4,d2
	bsr	fadeout

	move.w	#$0000,d0
	move.w	#$0030,d1
	move.w	#4,d2
	bsr	fadein
	move.w	#$00f0,d0
	move.w	#$0030,d1
	move.w	#4,d2
	bsr	fadeout

	move.w	#$0000,d0
	move.w	#$0033,d1
	move.w	#4,d2
	bsr	fadein
	move.w	#$00ff,d0
	move.w	#$0033,d1
	move.w	#4,d2
	bsr	fadeout

	move.w	#$0000,d0
	move.w	#$0003,d1
	move.w	#4,d2
	bsr	fadein
	move.w	#$000f,d0
	move.w	#$0003,d1
	move.w	#4,d2
	bsr	fadeout

	move.w	#$0000,d0
	move.w	#$0303,d1
	move.w	#4,d2
	bsr	fadein
	move.w	#$0f0f,d0
	move.w	#$0303,d1
	move.w	#4,d2
	bsr	fadeout

	move.w	#$0000,d0
	move.w	#$0333,d1
	move.w	#4,d2
	bsr	fadein
	move.w	#$0fff,d0
	move.w	#$0333,d1
	move.w	#4,d2
	bsr	fadeout

	move.w	#$0000,d0
	move.w	#$0300,d1
	move.w	#4,d2
	bsr	fadein
	move.w	#$0f00,d0
	move.w	#$0300,d1
	move.w	#4,d2
	bsr	fadeout

	move.w	#$0000,d0
	move.w	#$0330,d1
	move.w	#4,d2
	bsr	fadein
	move.w	#$0ff0,d0
	move.w	#$0330,d1
	move.w	#4,d2
	bsr	fadeout

	move.w	#$0000,d0
	move.w	#$0030,d1
	move.w	#4,d2
	bsr	fadein
	move.w	#$00f0,d0
	move.w	#$0030,d1
	move.w	#4,d2
	bsr	fadeout

	move.w	#$0000,d0
	move.w	#$0033,d1
	move.w	#4,d2
	bsr	fadein
	move.w	#$00ff,d0
	move.w	#$0033,d1
	move.w	#4,d2
	bsr	fadeout

	move.w	#$0000,d0
	move.w	#$0003,d1
	move.w	#4,d2
	bsr	fadein
	move.w	#$000f,d0
	move.w	#$0003,d1
	move.w	#4,d2
	bsr	fadeout

	move.w	#$0000,d0
	move.w	#$0303,d1
	move.w	#4,d2
	bsr	fadein
	move.w	#$0f0f,d0
	move.w	#$0303,d1
	move.w	#4,d2
	bsr	fadeout

	move.w	#$0000,d0
	move.w	#$0333,d1
	move.w	#4,d2
	bsr	fadein
	move.w	#$0fff,d0
	move.w	#$0333,d1
	move.w	#4,d2
	bsr	fadeout
rts

INITTUBE:
	lea	tubestr,a0
	jsr	initdisplay

	move.l	#31,d0
	lea	tubecol,a0
	lea	tube,a1
	add.l	#80000,a1
	jsr	setcolor

	lea	saule,a0
	move.w	#$0005,d0
	move.w	#$0001,d1
	move.w	#9,d2
	bsr	fadein
	move.w	#$000f,d0
	move.w	#$0330,d1
	move.w	#5,d2
	bsr	fadein
	move.w	#$0fff,d0
	move.w	#$0110,d1
	move.w	#15,d2
	bsr	fadeout
	move.w	#$000f,d0
	move.w	#$0001,d1
	move.w	#15,d2
	bsr	fadeout

	lea	tubecop,a0
	bsr	COPMERGE
rts


scrollround:
	move.l	#$dff000,a5	;custom offset
	move.l	a0,a6	;struct sichern
	clr.l	d0
	move.w	24(a6),d0
	sub.w	#1,d0
	cmp.w	#0,d0
	beq	nextchar
	move.w	d0,24(a6)
charready:
	bsr	blitline
rts

nextchar:
	move.w	22(a6),24(a6)	;set counter back
	move.w	32(a6),20(a6)	;set shifter back
	move.l	16(a6),a0	;scrpointer in a0
	move.b	(a0)+,d0
	cmp.b	#0,d0		;end of scrtext ?
	beq	scrollbackset
	move.l	a0,16(a6)	;save new pointer
	bsr	findchar
	move.l	(a6),a1		;dest.screen
	add.l	#46,a1		;right position
	move.l	4(a6),a0	;sourcescreen
	add.l	d1,a0		;act. char
	bsr	bltchar
jmp	charready

scrollbackset:
	move.l	12(a6),16(a6)
jmp	charready

findchar:
	move.l	#0,d1		;in d0 das zeichen
	move.l	8(a6),a0
	move.l	#9,d2
search:
	move.b	(a0)+,d3
	cmp.b	#0,d3
	beq	found
	cmp.b	d3,d0
	beq	found
	add.l	#4,d1
dbra	d2,search
	move.l	#9,d2
	clr.l	d4
	move.w	26(a6),d4
	mulu 	#40,d4
	add.l	d4,d1
	jmp	search
found:
rts

bltchar:
	move.w	#$8400,dmacon(a5)	;allow Blitter-DMA
	jsr	blitwait
	move.l	a1,bltdpth(a5)		;dest.screen
	move.l	a0,bltapth(a5)		;source screen
	move.w	#36,bltamod(a5)
	move.w	#46,bltdmod(a5)
	move.w	#$ffff,bltafwm(a5)
	move.w	#$ffff,bltalwm(a5)
	move.w	#$09f0,bltcon0(a5)	;shifter
	move.w	#0,bltcon1(a5)
	clr.l	d0
	move.w	26(a6),d0	;heigh of font
	mulu	#64,d0
	add.w	#2,d0

	clr.l	d1
	clr.l	d3
	move.w	30(a6),d3	;no. of planes
planeblit:
	move.w	d0,bltsize(a5)
	move.w	28(a6),d1	;hoehe der dest.bmap
	mulu	#50,d1		;mul mit breite
	bsr	blitwait
	add.l	d1,a1
	add.l	#10240,a0	;immer lo-res fuer fontpage
	move.l	a1,bltdpth(a5)
	move.l	a0,bltapth(a5)
dbra	d3,planeblit
	
rts

blitwait:
	btst	#14,$dff002
	bne	blitwait
rts

blitline:
	move.w	#$8400,dmacon(a5)
	jsr	blitwait
	move.l	(a6),a0
	move.l	a0,bltapth(a5)
	move.l	a0,a1
	sub.l	#2,a1
	move.l	a1,bltdpth(a5)
	move.w	#0,bltamod(a5)
	move.w	#0,bltdmod(a5)
	move.w	#$0000,bltafwm(a5)
	move.w	#$ffff,bltalwm(a5)
	move.w	20(a6),bltcon0(a5)	;shifter
	move.w	#0,bltcon1(a5)
	clr.l	d0
	move.w	26(a6),d0	;heigh of font
	add.w	#1,d0
	mulu	#64,d0
	add.w	#25,d0

	clr.l	d1
	move.w	28(a6),d1	;hoehe der bmap
	mulu	#50,d1		;mul mit breite

	clr.l	d3
	move.w	30(a6),d3	;no. of planes
planecharblit:
	move.w	d0,bltsize(a5)
	add.l	d1,a0
	add.l	d1,a1
	bsr	blitwait
	move.l	a0,bltapth(a5)
	move.l	a1,bltdpth(a5)
dbra	d3,planecharblit

rts

initdualdisplay:
	move.l	2(a0),a1	;copperlist in a1
	move.w	#$0108,(a1)+	;
	move.w	14(a0),(a1)+	;set MODULOS
	move.w	#$010a,(a1)+	;
	move.w	26(a0),(a1)+	;

	move.w	6(a0),d3
	move.w	8(a0),d2
	mulu	d2,d3		;Planesize
	move.l	10(a0),d2	;Bplpointer
	move.w	#$00e0,d1
	move.w	16(a0),d0	;Depth
initpf1:
	move.w	d1,(a1)+	; 1st MOVE
	swap	d2
	move.w	d2,(a1)+
	add.w	#2,d1
	move.w	d1,(a1)+	; 2nd MOVE
	swap	d2
	move.w	d2,(a1)+
	add.w	#6,d1		;Next BPLPTH
	add.l	d3,d2		;Next Plane
dbra	d0,initpf1

	move.w	18(a0),d3
	move.w	20(a0),d2
	mulu	d2,d3		;Planesize
	move.l	22(a0),d2	;Bplpointer
	move.w	#$00e4,d1
	move.w	28(a0),d0	;Depth
initpf2:
	move.w	d1,(a1)+	; 1st MOVE
	swap	d2
	move.w	d2,(a1)+
	add.w	#2,d1
	move.w	d1,(a1)+	; 2nd MOVE
	swap	d2
	move.w	d2,(a1)+
	add.w	#6,d1		;Next BPLPTH
	add.l	d3,d2		;Next Plane
dbra	d0,initpf2
	move.w	#$0100,(a1)+
	move.w	(a0),(a1)+	;Playfields on!!

rts

initdisplay:
	movem.l	d0-d7/a1-a6,-(sp)

	move.l	10(a0),a1	;copperlist in a1
	move.w	#$0100,(a1)+	;MOVEC reg:$dff100
	move.w	(a0),(a1)+	;      inh:(a0)
	move.w	#$0108,(a1)+	;****************
	move.w	14(a0),(a1)+	;*modulo        *
	move.w	#$010a,(a1)+	;*init          *
	move.w	14(a0),(a1)+	;****************

	move.w	2(a0),d4	;*****************************
	move.w	4(a0),d3	;* errechnung der bmapgrosse *
	mulu	d4,d3		;*****************************

	move.l	6(a0),d0	;bitplane init
	move.w	#$00e0,d2
	move.w	16(a0),d1	;no. of bplanes
initplanes:
	swap	d0
	move.w	d2,(a1)+
	move.w	d0,(a1)+
	swap	d0
	add.w	#$0002,d2
	move.w	d2,(a1)+
	move.w	d0,(a1)+
	add.w	#$0002,d2
	add.l	d3,d0
	dbra	d1,initplanes

	movem.l	(sp)+,d0-d7/a1-a6	
rts

	; a0:copperbuffer  d0:colorcounter a1:colorpointer
setcolor:
	movem.l	d1-d7/a2-a6,-(sp)

	move.w	#$0180,d1
coloron:
	move.w	d1,(a0)+
	move.w	(a1)+,(a0)+
	add.w	#2,d1
	dbra	d0,coloron

	movem.l	(sp)+,d1-d7/a2-a6
rts

	;d0:begin  d1:mask d2 counter a0:dest.
fadein:
	move.w	d0,(a0)+
	add.w	d1,d0
dbra	d2,fadein
rts

fadeout:
	move.w	d0,(a0)+
	sub.w	d1,d0
dbra	d2,fadeout
rts


;******************************************************
;*                 Copper-Merge-Routine               *
;*                 a0:adr. der STRUKTUR               *
;******************************************************
COPMERGE:
	move.l	a0,a6		;struct ====> a6
	move.l	6(a6),a0	;destination in a0
	move.l	10(a6),a1	;zusatz in a1

	move.w	4(a6),d0	;wieviele zusatzlisten?
	move.l	a6,a5
	add.l	#14,a5		;begin der datenlisten in a5
	lea 	variable,a4	;variabelnbuffer(mind.3 X dat.)
copystruct:
	move.w	(a5)+,(a4)+	;register X moved,
	move.l	(a5)+,(a4)+	;addresse X moved
dbra	d0,copystruct

	move.w	(a6),d1		;waitzahler
	move.w	2(a6),d0	;lange
generatelist:
	move.w	d1,(a0)+	;wait in destination
	move.w	#$fffe,(a0)+
	move.w	(a1),d2		;wait from zlist in d2
	cmp.w	d1,d2		;both waits equal ?
	beq	intzlist
intdatlist:
	lea	variable,a5
	move.w	4(a6),d2	;how much listen ?
modidat:			;modify datlist
	move.w	(a5)+,(a0)+
	move.l	(a5),a4		;address of datlist x in a4
	move.w	(a4)+,(a0)+	;move 2.moveword to dest.
	move.l	a4,(a5)+	;address of datlist x saven
dbra	d2,modidat
	add.w	#$0100,d1
dbra	d0,generatelist
rts

intzlist:
	add.l	#2,a1		;1 word ueberspringen
	move.w	(a1)+,d2	;wieviele moves?
zustzmoves:
	move.l	(a1)+,(a0)+
dbra	d2,zustzmoves
jmp	intdatlist

;****************************************************************
;*                          Replay                              *
;****************************************************************

; -----------------------------------------------------
; ------- D.O.C Soundtracker V2.3 - playroutine -------
; -----------------------------------------------------
; ---- Improved and optimized by  Unknown of D.O.C ----
; --------- Based on the playroutine from TJC ---------
; -----------------------------------------------------

mt_init:lea	mt_data,a0
	add.l	#$03b8,a0
	moveq	#$7f,d0
	moveq	#0,d1
mt_init1:
	move.l	d1,d2
	subq.w	#1,d0
mt_init2:
	move.b	(a0)+,d1
	cmp.b	d2,d1
	bgt.s	mt_init1
	dbf	d0,mt_init2
	addq.b	#1,d2

mt_init3:
	lea	mt_data,a0
	lea	mt_sample1(pc),a1
	asl.l	#8,d2
	asl.l	#2,d2
	add.l	#$438,d2
	add.l	a0,d2
	moveq	#$1e,d0
mt_init4:
	move.l	d2,(a1)+
	moveq	#0,d1
	move.w	42(a0),d1
	asl.l	#1,d1
	add.l	d1,d2
	add.l	#$1e,a0
	dbf	d0,mt_init4

	lea	mt_sample1(PC),a0
	moveq	#0,d0
mt_clear:
	move.l	(a0,d0.w),a1
	clr.l	(a1)
	addq.w	#4,d0
	cmp.w	#$7c,d0
	bne.s	mt_clear

	clr.w	$dff0a8
	clr.w	$dff0b8
	clr.w	$dff0c8
	clr.w	$dff0d8
	clr.l	mt_partnrplay
	clr.l	mt_partnote
	clr.l	mt_partpoint

	move.b	mt_data+$3b6,mt_maxpart+1
	rts

mt_end:	clr.w	$dff0a8
	clr.w	$dff0b8
	clr.w	$dff0c8
	clr.w	$dff0d8
	move.w	#$f,$dff096
	rts

mt_music:
	addq.w	#1,mt_counter
mt_cool:cmp.w	#6,mt_counter
	bne.s	mt_notsix
	clr.w	mt_counter
	bra	mt_rout2

mt_notsix:
	lea	mt_aud1temp(PC),a6
	tst.b	3(a6)
	beq.s	mt_arp1
	lea	$dff0a0,a5		
	bsr.s	mt_arprout
mt_arp1:lea	mt_aud2temp(PC),a6
	tst.b	3(a6)
	beq.s	mt_arp2
	lea	$dff0b0,a5
	bsr.s	mt_arprout
mt_arp2:lea	mt_aud3temp(PC),a6
	tst.b	3(a6)
	beq.s	mt_arp3
	lea	$dff0c0,a5
	bsr.s	mt_arprout
mt_arp3:lea	mt_aud4temp(PC),a6
	tst.b	3(a6)
	beq.s	mt_arp4
	lea	$dff0d0,a5
	bra.s	mt_arprout
mt_arp4:rts

mt_arprout:
	move.b	2(a6),d0
	and.b	#$0f,d0
	tst.b	d0
	beq	mt_arpegrt
	cmp.b	#$01,d0
	beq.s	mt_portup
	cmp.b	#$02,d0
	beq.s	mt_portdwn
	cmp.b	#$0a,d0
	beq.s	mt_volslide
	rts

mt_portup:
	moveq	#0,d0
	move.b	3(a6),d0
	sub.w	d0,22(a6)
	cmp.w	#$71,22(a6)
	bpl.s	mt_ok1
	move.w	#$71,22(a6)
mt_ok1:	move.w	22(a6),6(a5)
	rts

mt_portdwn:
	moveq	#0,d0
	move.b	3(a6),d0
	add.w	d0,22(a6)
	cmp.w	#$538,22(a6)
	bmi.s	mt_ok2
	move.w	#$538,22(a6)
mt_ok2:	move.w	22(a6),6(a5)
	rts

mt_volslide:
	moveq	#0,d0
	move.b	3(a6),d0
	lsr.b	#4,d0
	tst.b	d0
	beq.s	mt_voldwn
	add.w	d0,18(a6)
	cmp.w	#64,18(a6)
	bmi.s	mt_ok3
	move.w	#64,18(a6)
mt_ok3:	move.w	18(a6),8(a5)
	rts
mt_voldwn:
	moveq	#0,d0
	move.b	3(a6),d0
	and.b	#$0f,d0
	sub.w	d0,18(a6)
	bpl.s	mt_ok4
	clr.w	18(a6)
mt_ok4:	move.w	18(a6),8(a5)
	rts

mt_arpegrt:
	move.w	mt_counter(PC),d0
	cmp.w	#1,d0
	beq.s	mt_loop2
	cmp.w	#2,d0
	beq.s	mt_loop3
	cmp.w	#3,d0
	beq.s	mt_loop4
	cmp.w	#4,d0
	beq.s	mt_loop2
	cmp.w	#5,d0
	beq.s	mt_loop3
	rts

mt_loop2:
	moveq	#0,d0
	move.b	3(a6),d0
	lsr.b	#4,d0
	bra.s	mt_cont
mt_loop3:
	moveq	#$00,d0
	move.b	3(a6),d0
	and.b	#$0f,d0
	bra.s	mt_cont
mt_loop4:
	move.w	16(a6),d2
	bra.s	mt_endpart
mt_cont:
	add.w	d0,d0
	moveq	#0,d1
	move.w	16(a6),d1
	lea	mt_arpeggio(PC),a0
mt_loop5:
	move.w	(a0,d0),d2
	cmp.w	(a0),d1
	beq.s	mt_endpart
	addq.l	#2,a0
	bra.s	mt_loop5
mt_endpart:
	move.w	d2,6(a5)
	rts

mt_rout2:
	lea	mt_data,a0
	move.l	a0,a3
	add.l	#$0c,a3
	move.l	a0,a2
	add.l	#$3b8,a2
	add.l	#$43c,a0
	move.l	mt_partnrplay(PC),d0
	moveq	#0,d1
	move.b	(a2,d0),d1
	asl.l	#8,d1
	asl.l	#2,d1
	add.l	mt_partnote(PC),d1
	move.l	d1,mt_partpoint
	clr.w	mt_dmacon

	lea	$dff0a0,a5
	lea	mt_aud1temp(PC),a6
	bsr	mt_playit
	lea	$dff0b0,a5
	lea	mt_aud2temp(PC),a6
	bsr	mt_playit
	lea	$dff0c0,a5
	lea	mt_aud3temp(PC),a6
	bsr	mt_playit
	lea	$dff0d0,a5
	lea	mt_aud4temp(PC),a6
	bsr	mt_playit
	move.w	#$01f4,d0
mt_rls:	dbf	d0,mt_rls

	move.w	#$8000,d0
	or.w	mt_dmacon,d0
	move.w	d0,$dff096

	lea	mt_aud4temp(PC),a6
	cmp.w	#1,14(a6)
	bne.s	mt_voice3
	move.l	10(a6),$dff0d0
	move.w	#1,$dff0d4
mt_voice3:
	lea	mt_aud3temp(PC),a6
	cmp.w	#1,14(a6)
	bne.s	mt_voice2
	move.l	10(a6),$dff0c0
	move.w	#1,$dff0c4
mt_voice2:
	lea	mt_aud2temp(PC),a6
	cmp.w	#1,14(a6)
	bne.s	mt_voice1
	move.l	10(a6),$dff0b0
	move.w	#1,$dff0b4
mt_voice1:
	lea	mt_aud1temp(PC),a6
	cmp.w	#1,14(a6)
	bne.s	mt_voice0
	move.l	10(a6),$dff0a0
	move.w	#1,$dff0a4
mt_voice0:
	move.l	mt_partnote(PC),d0
	add.l	#$10,d0
	move.l	d0,mt_partnote
	cmp.l	#$400,d0
	bne.s	mt_stop
mt_higher:
	clr.l	mt_partnote
	addq.l	#1,mt_partnrplay
	moveq	#0,d0
	move.w	mt_maxpart(PC),d0
	move.l	mt_partnrplay(PC),d1
	cmp.l	d0,d1
	bne.s	mt_stop
	clr.l	mt_partnrplay
;	st	Pflag
mt_stop:tst.w	mt_status
	beq.s	mt_stop2
	clr.w	mt_status
	bra.s	mt_higher
mt_stop2:
	rts

mt_playit:
	move.l	(a0,d1.l),(a6)
	addq.l	#4,d1
	moveq	#0,d2
	move.b	2(a6),d2
	and.b	#$f0,d2
	lsr.b	#4,d2

	move.b	(a6),d0
	and.b	#$f0,d0
	or.b	d0,d2
	tst.b	d2
	beq.s	mt_nosamplechange

	moveq	#0,d3
	lea	mt_samples(PC),a1
	move.l	d2,d4
	asl.l	#2,d2
	mulu	#$1e,d4
	move.l	(a1,d2),4(a6)
	move.w	(a3,d4.l),8(a6)
	move.w	2(a3,d4.l),18(a6)
	move.w	4(a3,d4.l),d3
	tst.w	d3
	beq.s	mt_displace
	move.l	4(a6),d2
	add.l	d3,d2
	move.l	d2,4(a6)
	move.l	d2,10(a6)
	move.w	6(a3,d4.l),8(a6)
	move.w	6(a3,d4.l),14(a6)
	move.w	18(a6),8(a5)
	bra.s	mt_nosamplechange

mt_displace:
	move.l	4(a6),d2
	add.l	d3,d2
	move.l	d2,10(a6)
	move.w	6(a3,d4.l),14(a6)
	move.w	18(a6),8(a5)
mt_nosamplechange:
	tst.w	(a6)
	beq.s	mt_retrout
	move.w	(a6),16(a6)
	move.w	20(a6),$dff096
	move.l	4(a6),(a5)
	move.w	8(a6),4(a5)
	move.w	(a6),6(a5)
	move.w	20(a6),d0
	or.w	d0,mt_dmacon

mt_retrout:
	tst.w	(a6)
	beq.s	mt_nonewper
	move.w	(a6),22(a6)

mt_nonewper:
	move.b	2(a6),d0
	and.b	#$0f,d0
	cmp.b	#$0b,d0
	beq.s	mt_posjmp
	cmp.b	#$0c,d0
	beq.s	mt_setvol
	cmp.b	#$0d,d0
	beq.s	mt_break
	cmp.b	#$0e,d0
	beq.s	mt_setfil
	cmp.b	#$0f,d0
	beq.s	mt_setspeed
	rts

mt_posjmp:
	not.w	mt_status
	moveq	#0,d0
	move.b	3(a6),d0
	subq.b	#1,d0
	move.l	d0,mt_partnrplay
	rts

mt_setvol:
	move.b	3(a6),8(a5)
	rts

mt_break:
	not.w	mt_status
	rts

mt_setfil:
	moveq	#0,d0
	move.b	3(a6),d0
	and.b	#1,d0
	rol.b	#1,d0
	and.b	#$fd,$bfe001
	or.b	d0,$bfe001
	rts

mt_setspeed:
	move.b	3(a6),d0
	and.b	#$0f,d0
	beq.s	mt_back
	clr.w	mt_counter
	move.b	d0,mt_cool+3
mt_back:rts

mt_aud1temp:
	blk.w	10,0
	dc.w	1
	blk.w	2,0
mt_aud2temp:
	blk.w	10,0
	dc.w	2
	blk.w	2,0
mt_aud3temp:
	blk.w	10,0
	dc.w	4
	blk.w	2,0
mt_aud4temp:
	blk.w	10,0
	dc.w	8
	blk.w	2,0

mt_partnote:	dc.l	0
mt_partnrplay:	dc.l	0
mt_counter:	dc.w	0
mt_partpoint:	dc.l	0
mt_samples:	dc.l	0
mt_sample1:	blk.l	31,0
mt_maxpart:	dc.w	0
mt_dmacon:	dc.w	0
mt_status:	dc.w	0

mt_arpeggio:
	dc.w $0358,$0328,$02fa,$02d0,$02a6,$0280,$025c
	dc.w $023a,$021a,$01fc,$01e0,$01c5,$01ac,$0194,$017d
	dc.w $0168,$0153,$0140,$012e,$011d,$010d,$00fe,$00f0
	dc.w $00e2,$00d6,$00ca,$00be,$00b4,$00aa,$00a0,$0097
	dc.w $008f,$0087,$007f,$0078,$0071,$0000,$0000,$0000



;******************************************************
;                DATENBEREICHE UND STRUKTUREN         *
;******************************************************

display:
	dc.w	$5000	; depht,modes(bitbelegung wie $dff100)
	dc.w	40	; width (in bytes)
	dc.w	85	; heigh
	dc.l	pic	; pointer (bitmaps)
	dc.l	coppdis ; copperbuffer
	dc.w	0	; modulo
	dc.w	4	; depht(dez.zahl)
tubestr:
	dc.w	$5000	; depht,modes(bitbelegung wie $dff100)
	dc.w	40	; width (in bytes)
	dc.w	400	; heigh
	dc.l	tube	; pointer (bitmaps)
	dc.l	coptube ; copperbuffer
	dc.w	0	; modulo
	dc.w	4	; depht(dez.zahl)

scrollstruct2:	;Displaystruct(DUALPLAYFIELD!!)
	dc.w	0	; depht,modes(bitbelegung wie $dff100)
	dc.l	scrolldisplay ; copperbuffer
	dc.w	50	; width (in bytes)
	dc.w	185	; heigh
	dc.l	scroll1	; pointer (bitmaps)
	dc.w	4	; modulo
	dc.w	2	; depht(dez.zahl)
;  zweites Playfield
	dc.w	50	; width (in bytes)
	dc.w	185	; heigh
	dc.l	scroll2+3500	; pointer (bitmaps)
	dc.w	4	; modulo
	dc.w	2	; depht(dez.zahl)

scroller1:		;V 1.2
	dc.l	scroll1+3500	;ausgabescreen(immer 50 bytes breit)
	dc.l	font	;source screen(jeder buchstabe 2 words)
	dc.l	translate	; translationstring
	dc.l	scrolltext1	;text
	dc.l	scrolltext1	;actuelle scrollcharpointer
	dc.w	$f9f0	;speed (siehe BLTCON0!)
	dc.w	32	;wait for next char
	dc.w	32	;default
	dc.w	38	;hoehe
	dc.w	185	;screen heigh
	dc.w	2	;depht
	dc.w	$f9f0	;shifter default

scroller2:		;V 1.2
	dc.l	scroll2+3500	;ausgabescreen(immer 50 bytes breit)
	dc.l	font	;source screen(jeder buchstabe 2 words)
	dc.l	translate	; translationstring
	dc.l	scrolltext2	;text
	dc.l	scrolltext2	;actuelle scrollcharpointer
	dc.w	$f9f0	;speed (siehe BLTCON0!)
	dc.w	32	;wait for next char
	dc.w	32	;default
	dc.w	38	;hoehe
	dc.w	185	;screen heigh
	dc.w	2	;depht
	dc.w	$f9f0	;shifter default

TRANSLATE:
	dc.b	'ABCDEFGHIJ'	;t= D.I.D
	dc.b	'KLMNOPQRST'	;m= MUZAK
	dc.b	'UVWXYZ 012'	;g= GFX
	dc.b	'3456789.,-'	;c= CODE
	dc.b	'+!?^&t()mg'
	dc.b	'c',0
SCROLLtext1:
	dc.b	'HALLO HANNES '
	dc.b	'HIER IST INFONAUT..'	;m= MUZAK
	dc.b	'WIE VERSPROCHEN MEIN DEMO '	;g= GFX
	dc.b	'ES SIND NOCH EINIGE ANDERE '	;c= CODE
	dc.b	'(NUETZLICHE) TOOLS DABEI! '
	DC.B	'ICH HOFFE DIE DEMO LAEUFT ORDENTLICH.......'
	DC.B	'DER ANDERE SCROLLER ENTHAELT DIE PROGRAMME '
	DC.B	'AUF DER DISK.......VIEL SPASS!......'
	dc.b	0
SCROLLtext2:
	dc.b	'DISK COMPACTED BY INFONAUT ON '	;m= MUZAK
	dc.b	'10.MAY.90 FOR HIS FRIEND CERBERUS...'	;g= GFX
	dc.b	'THIS DISK CONTAINS...'	;c= CODE
	dc.b	'XCOPY 2.3(89(!)TRACKS)(XCOPY)....'
	DC.B	'DISKMASTER(DM)......PLATSCH (MY WATEREFFECT)....'
	DC.B	'COPPERFX(I TOLD YOU YESTERDAY).....'
	DC.B	'AND OF COURSE  THE GREAT RED SECTOR INC. '
	DC.B	'CEBIT^90 DEMO (RSI).......'
	dc.b	0
even
tubecop:
	dc.w	$0009
	dc.w	45
	dc.w	2
	dc.l	tubedis
	dc.l	leer2
	dc.w	$0180
	dc.l	saule
	dc.w	$0108
	dc.l	mods
	dc.w	$10a
	dc.l	mods
logocop:
	dc.w	$0009
	dc.w	128
	dc.w	2
	dc.l	logodis
	dc.l	leer
	dc.w	$180
	dc.l	BARS
	dc.w	$182
	dc.l	logocol
	dc.w	$102
	dc.l	wabble


gfxname:
	dc.b	"graphics.library",0

even

;*************************************************
;*                   COPPER-BEREICH              *
;*************************************************

variable:
	blk.w	100,0
leer2:
	dc.w	$2d09,$0000,$0100,$0000
	dc.w	$fffe,$fffe
leer:
	dc.w	$0009,$0000,$00ac,$00ac
	dc.w	$fffe,$fffe
BARS:
	blk.w	130,$0
logocol:
	blk.w	130,$0
wabble:
	blk.w	128,$0
mods:
	dc.w	13*40,5*40,3*40,3*40,2*40,2*40,2*40,0
	dc.w	2*40,0,0,0,0,0,0,0
	dc.w	0,0,0,0,0,0,0,0
	dc.w	0,0,0,0,0,0,0,0
	dc.w	0,0,0,0,2*40
	dc.w	0,2*40,2*40,2*40,3*40,3*40,5*40,13*40
saule:
	blk.w	56,0
BARCOL:
	blk.w	15*10,$000f
barabstand:
	dc.l	7
baranzahl:
	dc.l	6
;************************************************
;*               COPPER-BEREICH ENDE            *
;************************************************

wabblecount:
	dc.b	0
even
wabbledat:
	dc.w	$0088,$00aa,$00cc,$00dd,$00ee,$00ee,$00ff,$00ff
	dc.w	$00ff,$00ee,$00ee,$00dd,$00cc,$00aa,$0088,$0088
	dc.w	$0066,$0044,$0033,$0022,$0022,$0011,$0011,$0011
	dc.w	$0022,$0022,$0033,$0044,$0066,$0088,$0

sinuscount:
	dc.b	0
SINUS:
dc.b $64,$62,$60,$5F,$5D,$5C,$5A,$58,$57,$55,$54,$52,$50,$4F,$4D,$4C 
dc.b $4A,$49,$47,$46,$44,$43,$41,$40,$3F,$3D,$3C,$3A,$39,$38,$36,$35 
dc.b $34,$32,$31,$30,$2F,$2E,$2C,$2B,$2A,$29,$28,$27,$26,$25,$24,$23 
dc.b $22,$21,$20,$1F,$1F,$1E,$1D,$1C,$1B,$1B,$1A,$1A,$19,$18,$18,$17 
dc.b $17,$16,$16,$16,$15,$15,$15,$14,$14,$14,$14,$14,$14,$14,$14,$14 
dc.b $14,$14,$14,$14,$14,$14,$14,$15,$15,$15,$16,$16,$16,$17,$17,$18 
dc.b $18,$19,$19,$1A,$1B,$1B,$1C,$1D,$1E,$1E,$1F,$20,$21,$22,$23,$24 
dc.b $25,$26,$27,$28,$29,$2A,$2B,$2C,$2D,$2F,$30,$31,$32,$34,$35,$36 
dc.b $38,$39,$3A,$3C,$3D,$3E,$40,$41,$43,$44,$46,$47,$49,$4A,$4C,$4D 
dc.b $4F,$50,$52,$53,$55,$57,$58,$5A,$5B,$5D,$5F,$60,$62,$63,$62,$60 
dc.b $5F,$5D,$5C,$5A,$58,$57,$55,$54,$52,$51,$4F,$4E,$4C,$4A,$49,$47 
dc.b $46,$44,$43,$42,$40,$3F,$3D,$3C,$3A,$39,$38,$36,$35,$34,$33,$31 
dc.b $30,$2F,$2E,$2C,$2B,$2A,$29,$28,$27,$26,$25,$24,$23,$22,$21,$20 
dc.b $1F,$1F,$1E,$1D,$1C,$1C,$1B,$1A,$1A,$19,$18,$18,$17,$17,$16,$16 
dc.b $16,$15,$15,$15,$14,$14,$14,$14,$14,$14,$14,$14,$14,$14,$14,$14 
dc.b $14,$14,$14,$14,$15,$15,$15,$16,$16,$16,$17,$17,$18,$18,$19,$19 
dc.b $1A,$1B,$1B,$1C,$1D,$1E,$1E,$1F,$20,$21,$22,$23,$24,$25,$26,$27 
dc.b $28,$29,$2A,$2B,$2C,$2D,$2F,$30,$31,$32,$34,$35,$36,$37,$39,$3A 
dc.b $3C,$3D,$3E,$40,$41,$43,$44,$46,$47,$49,$4A,$4C,$4D,$4F,$50,$52 
dc.b $53,$55,$57,$58,$5A,$5B,$5D,$5E,$60,$62,$63,$62,$61,$5F,$5D,$5C 

even
gfxbase:
	dc.l	0
oldcopper:
	dc.l	0
sprite3:
	blk.w	4,0
tubezahl:
	dc.l	0
scrollzahler:dc.l	0
scrollstatus:dc.w	0
scrolltab:
	dc.w	$f9f0,32
	dc.w	$e9f0,16
	dc.w	$c9f0,8
	dc.w	$89f0,4
	dc.w	$0909,2
scrollspeed1:
	dc.w	0
scrollspeed2:
	dc.w	0

newcopper:
;	dc.w	0,0
	dc.w	$0180,$0000,$0182,$0fff
	dc.w	$008e,$2c61,$0090,$74f1
	dc.w	$0092,$0038,$0094,$00d0
	dc.w	$0102,$0000,$0104,$0000
coppdis:
	blk.w	26,$00ac
colors:
	blk.w	64,$00ac
logodis:
	blk.w	1050,$00ac
	dc.w	$8009,$fffe,$0100,$0000,$0180,$0000
	dc.w	$8109,$fffe,$0180,$0100
	dc.w	$8209,$fffe,$0180,$0200
	dc.w	$8309,$fffe,$0180,$0300
	dc.w	$8409,$fffe,$0180,$0400
	dc.w	$8509,$fffe,$0180,$0500
	dc.w	$8609,$fffe,$0180,$0600
	dc.w	$8709,$fffe,$0180,$0700
	dc.w	$8809,$fffe,$0180,$0800
	dc.w	$8909,$fffe,$0180,$0900
	dc.w	$8a09,$fffe,$0180,$0a00
	dc.w	$8b09,$fffe,$0180,$0b00
	dc.w	$8c09,$fffe,$0180,$0c00
	dc.w	$8d09,$fffe,$0180,$0d00
	dc.w	$8e09,$fffe,$0180,$0e00
	dc.w	$8f09,$fffe,$0180,$0f00
	dc.w	$9009,$fffe,$0180,$0000
	dc.w	$008e,$2c61,$0090,$74e0
	dc.w	$0092,$0028,$0094,$00d8
	dc.w	$0102,$0000
scrolldisplay:
	blk.w	30,$00ac
	dc.w	$0104
scrollpri:
	dc.w	$0
	dc.w	$0180,$0000,$0182,$0fff
	dc.w	$0184,$0e00,$0186,$0c00
	dc.w	$0188,$0a00,$018a,$0800
	dc.w	$018c,$0600,$018e,$0fff
	dc.w	$0190,$0000,$0192,$0fff
	dc.w	$0194,$0400,$0196,$0600
	dc.w	$0198,$0800,$019a,$0a00
	dc.w	$019c,$0c00,$019e,$0fff

	dc.w	$9109,$fffe,$0100,$6400
	dc.w	$ff09,$fffe,$0100,$0000
	dc.w	$ffdf,$fffe,$0104,$0000
	dc.w	$0092,$0038,$0094,$00d0
coptube:
	blk.w	26,$00ac
tubecol:
	blk.w	64,$00ac
tubedis:
	blk.w	1000,$00ac

;******************Bildschirmdisplays**********************
font:
	blk.b	30736,$0

scroll1:
	blk.b	27750,$0	;185*3*50 lines
scroll2:
	blk.b	27750,$0

pic:	
	blk.b	17064,$0	;logo.iot2
tube:
	blk.b	80064,$0	;tube.iot2
mt_data:	blk.b	33404,0
