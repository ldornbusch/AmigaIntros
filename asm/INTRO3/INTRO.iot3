>EXTERN "intros/intro3/LAUF",secondtube
>EXTERN "intros:intro3/LAUF",tubeplane
>EXTERN "intros:intro3/logo.iot3",logoplane
>EXTERN "intros:intro3/FONT",font
>EXTERN "intros:intro3/font.mask",mask
>EXTERN "intros:intro3/daten",calcwabbles
>EXTERN "intros:songs/song2",mt_data
>EXTERN "intros:intro3/Sinusdat",coordinates
forbid:		equ	-$084
permit:		equ	-$08a
openlib:	equ	-$228
closelib:	equ	-$19e
execbase:	equ	$4
bltcon0:	equ	$040
bltcon1:	equ	$042
bltafwm:	equ	$044
bltalwm:	equ	$046
bltcpth:	equ	$048
bltbpth:	equ	$04c
bltapth:	equ	$050
bltdpth:	equ	$054
bltsize:	equ	$058
bltcmod:	equ	$060
bltbmod:	equ	$062
bltamod:	equ	$064
bltdmod:	equ	$066
dmacon:		equ	$096

main:
	move.l	execbase,a6
	jsr	forbid(a6)

	move.l	execbase,a6
	lea 	gfxname,a1
	move.l	#0,d0
	jsr	openlib(a6)
	move.l	d0,gfxbase

	move.w	#$0020,$dff096
	move.l	#$0,$dff144

	move.l	gfxbase,a0
	move.l	38(a0),oldcopper
	move.w	#$0080,$dff096
	move.l	#newcopper,$dff080
	move.w	#$8080,$dff096

	bsr	mt_init
	bsr	initcolors
	bsr	initscreens

	move.b	$dff00a+1,oldx
	move.b	$dff00a,oldy

	move.w	#$4020,$dff09a
	move.l	$6c,oldirq+2
	move.l	#myirq,$6c
	move.w	#$c020,$dff09a

mouse:
	btst	#6,$bfe001
bne	mouse

	move.w	#$4020,$dff09a
	move.l	oldirq+2,$6c
	move.w	#$c020,$dff09a

	bsr	mt_end

	move.l	gfxbase,a0
	move.w	#$0080,$dff096
	move.l	oldcopper,$dff080
	move.w	#$8080,$dff096

	move.w	#$8020,$dff096

	move.l	execbase,a6
	jsr	permit(a6)

	move.l	gfxbase,a1
	move.l	execbase,a6
	jsr	closelib(a6)

rts

myirq:
	movem.l	d0-d7/a0-a6,-(sp)

	lea	logocoppfx,a0
	bsr	copmerge

	bsr	cyclecolors

	bsr	touchwater

	cmp.w	#0,screencounter	; SCRCNTR=0 ?
	bne	noscrolly		; NO: SUB 1 no SCROLL!
	move.l	#$3ff,waitkonst
	move.w	#1,screencounter
	lea 	scrollstruct,a0		; YES:SCROLL
	bsr	scrollround
noscrolly:
	sub.w	#1,screencounter

	lea	waterfx,a0
	bsr	copmerge

	lea	tubedisplay,a0
	add.l	#42,6(a0)
	add.w	#1,tubecounter
	bsr	initplayfield2
	cmp.w	#256,tubecounter
	bne	tubeready
	lea	tubedisplay,a0
	move.l	#tubeplane,6(a0)
	move.w	#0,tubecounter
tubeready:

	bsr	sprudel

	bsr	scrollwabble

	lea	wabbles,a0
	move.w	wabblecount,192(a0)

	move.b	$dff00a+1,d0
	move.b	oldx,d1
	move.b	d0,oldx
	bsr	pruefen

	add.w	d2,xcoord

	cmp.w	#$ff00,xcoord
	bhi	auf0
	cmp.w	#$f,xcoord
	bhi	auff

irqend:
	move.w	xcoord,d2
	and.l	#$f,d2
	move.w	wabblecount,oldwabble
	move.w	d2,wabblecount

	move.w	oldwabble,d0
	move.w	wabblecount,d1
	move.w	#0,d3
	cmp.w	d1,d0
	bne	mousemove
	add.w	#1,wabblewait
	move.w	wabblewait,d3
mousemove:
	move.w	d3,wabblewait
	cmp.w	#250,wabblewait
	beq	makewabbles
wabblesready:

	bsr	mt_music

	move.l	waitkonst,d0
warten:
dbra	d0,warten
;	move.w	#$0fff,$dff180
	bsr	anim
;	move.w	#$0,$dff180

	movem.l	(sp)+,d0-d7/a0-a6
	move.w	#$0020,$dff09c
rte

oldirq:
jmp	$00000


auff:
	move.w	#$f,xcoord
jmp	irqend

auf0:
	move.w	#$0,xcoord
jmp	irqend

	;   alte vergleichswerte vorher fuellen!!!
	;   aktuellen wert in d0
	;   alten vergleichswert in d1(d0 in alten wert)
	;   'pruefen' aufrufen
	;   d2 ist der koordinaten offset
pruefen:
	ext.w	d0
	ext.w	d1
	sub.w	d0,d1
	move.w	d1,d2
	bpl.s	istpositiv
	neg.w	d1
istpositiv:
	cmp.w	#128,d1
	bhi.s	weiter
	neg.w	d2
rts

weiter:
	move.w	#-255,d3
	tst.w	d2
	bmi.s	unterlauf
	neg.w	d3
unterlauf:
	sub.w	d2,d3
	move.w	d3,d2
rts


;********************** SCROLL WATER TOUCH ********************
touchwater:
	cmp.l	#0,scrolloffset
	beq	touchwaterready		;scrollen noetig ?

	lea	scrolldisplay,a0
	move.l	scrolloffset,d0
	add.l	d0,6(a0)
	bsr	initplayfield

	move.l	scrolloffsetcounter,d0
	add.l	d0,scrolltouchcounter

	cmp.l	#30,scrolltouchcounter
	beq	zeroscrolloffset
	cmp.l	#0,scrolltouchcounter
	beq	zeroscrolloffset	

touchwaterready:
rts	

zeroscrolloffset:
	move.l	#0,scrolloffset
	sub.l	d0,scrolltouchcounter	;alter zustand 
jmp	touchwaterready

;********************** A N I M ***********************

killhim:
	move.l	a0,a2
	move.l	10(a0),a3
	move.l	14(a0),a4
	move.l	#font+8000,10(a0)
	bsr	ibis
	move.l	a2,a0
	move.l	a3,10(a0)
rts

calccords:
	move.w	22(a0),d0
	lea 	coordinates,a1
	add.w	d0,a1
	move.b	(a1),1(a0)
	add.b	26(a0),d0
	cmp.w	#249,d0
	bls	xsetready
	sub.w	#250,d0
xsetready:
	move.w	d0,22(a0)

	move.w	24(a0),d0
	lea 	coordinates,a1
	add.w	d0,a1
	move.b	(a1),3(a0)
	add.b	27(a0),d0
	cmp.w	#249,d0
	bls	ysetready
	sub.w	#250,d0
ysetready:
	move.w	d0,24(a0)
rts

anim:
	lea	bobby,a0
	bsr	killhim
	lea	bobby2,a0
	bsr	killhim
	lea	bobby3,a0
	bsr	killhim
	lea	bobby4,a0
;	bsr	killhim
	lea	bobby5,a0
;	bsr	killhim

	lea	bobby,a0
	bsr	calccords
	lea	bobby2,a0
	bsr	calccords
	lea	bobby3,a0
	bsr	calccords
	lea	bobby4,a0
;	bsr	calccords
	lea	bobby5,a0
;	bsr	calccords

	lea	bobby,a0
	move.w	(a0),d0
	mulu	#2,d0
	add.w	#50,d0
	move.w	d0,(a0)
	add.w	#5,2(a0)
	bsr	ibis
	lea	bobby2,a0
	move.w	(a0),d0
	mulu	#2,d0
	add.w	#50,d0
	move.w	d0,(a0)
	add.w	#5,2(a0)
	bsr	ibis
	lea	bobby3,a0
	move.w	(a0),d0
	mulu	#2,d0
	add.w	#50,d0
	move.w	d0,(a0)
	add.w	#5,2(a0)
	bsr	ibis
	lea	bobby4,a0
	add.w	#5,2(a0)
;	bsr	ibis
	lea	bobby5,a0
	add.w	#5,2(a0)
;	bsr	ibis

rts


initplayfield:
	movem.l	d0-d7/a1-a6,-(sp)

	move.l	10(a0),a1	;copperlist in a1
	move.w	2(a0),d4	;*****************************
	move.w	4(a0),d3	;* errechnung der bmapgrosse *
	mulu	d4,d3		;*****************************

	move.l	6(a0),d0	;bitplane init
	move.w	14(a0),d2
	move.w	16(a0),d1	;no. of bplanes
initdualplanes:
	swap	d0
	move.w	d2,(a1)+
	move.w	d0,(a1)+
	swap	d0
	add.w	#$0002,d2
	move.w	d2,(a1)+
	move.w	d0,(a1)+
	add.w	#$0006,d2
	add.l	d3,d0
dbra	d1,initdualplanes
	move.w	#$0100,(a1)+	;MOVEC reg:$dff100
	move.w	(a0),(a1)+	;      inh:(a0)

	movem.l	(sp)+,d0-d7/a1-a6	
rts

initplayfield2:
	movem.l	d0-d7/a1-a6,-(sp)

	move.l	10(a0),a1	;copperlist in a1
	move.w	2(a0),d4	;*****************************
	move.w	4(a0),d3	;* errechnung der bmapgrosse *
	mulu	d4,d3		;*****************************

	move.l	6(a0),d0	;bitplane init
	move.w	14(a0),d2
	move.w	16(a0),d1	;no. of bplanes
initmonoplanes:
	swap	d0
	move.w	d2,(a1)+
	move.w	d0,(a1)+
	swap	d0
	add.w	#$0002,d2
	move.w	d2,(a1)+
	move.w	d0,(a1)+
	add.w	#$0002,d2
	add.l	d3,d0
dbra	d1,initmonoplanes
	move.w	#$0100,(a1)+	;MOVEC reg:$dff100
	move.w	(a0),(a1)+	;      inh:(a0)

	movem.l	(sp)+,d0-d7/a1-a6	
rts

scrollwabble:
	lea	wabbles,a0
	lea	wabbles,a1
	add.l	#2,a1
	moveq	#100,d0
copywabble:
	move.w	(a1)+,(a0)+
	dbra	d0,copywabble
rts

	; a0:copperbuffer  d0:colorcounter a1:colorpointer d1:coladd.

setcolor:
	movem.l	d1-d7/a2-a6,-(sp)

coloron:
	move.w	d1,(a0)+
	move.w	(a1)+,(a0)+
	add.w	#2,d1
dbra	d0,coloron

	movem.l	(sp)+,d1-d7/a2-a6
rts

;*********************** U N I S C R O L L E R *********************

scrollround:
	move.l	#$dff000,a5	;custom offset
	move.l	a0,a6	;struct sichern
	clr.l	d0
	move.w	24(a6),d0
	sub.w	#1,d0
	cmp.w	#0,d0
	beq	nextchar
	move.w	d0,24(a6)
charready:
	bsr	blitline
rts

nextchar:
	move.w	22(a6),24(a6)	;set counter back
	move.w	32(a6),20(a6)	;set shifter back
	move.l	16(a6),a0	;scrpointer in a0
	move.b	(a0)+,d0
	cmp.b	#0,d0		;end of scrtext ?
	beq	scrollbackset
	move.l	a0,16(a6)	;save new pointer
	bsr	findchar
	move.l	(a6),a1		;dest.screen
	add.l	#46,a1		;right position
	move.l	4(a6),a0	;sourcescreen
	add.l	d1,a0		;act. char
	bsr	bltchar
jmp	charready

scrollbackset:
	move.l	12(a6),16(a6)
jmp	charready

findchar:
	cmp.b	#$74,d0	;downrequested ?
	bne	qup	;NO:  jmp qup(uprequested)
	jmp	down	;YES: jmp down
qup:
	cmp.b	#$75,d0
	bne	qslower
	jmp	up
qslower:
	cmp.b	#$76,d0
	bne	qslow
	jmp	slower
qslow:
	cmp.b	#$77,d0
	bne	qmiddle
	jmp	slow
qmiddle:
	cmp.b	#$78,d0
	bne	qfast
	jmp	middle
qfast:
	cmp.b	#$79,d0
	bne	qfaster
	jmp 	fast
qfaster:
	cmp.b	#$7a,d0
	bne	qstop
	jmp	faster
qstop:
	cmp.b	#$73,d0
	beq	stand


	move.l	#0,d1		;in d0 das zeichen
	move.l	8(a6),a0
	move.l	#9,d2
search:
	move.b	(a0)+,d3
	cmp.b	#0,d3
	beq	found
	cmp.b	d3,d0
	beq	found
	add.l	#4,d1
dbra	d2,search
	move.l	#9,d2
	clr.l	d4
	move.w	26(a6),d4
	mulu 	#40,d4
	add.l	d4,d1
	jmp	search
found:
rts

bltchar:
	move.w	#$8400,dmacon(a5)	;allow Blitter-DMA
	jsr	blitwait
	move.l	a1,bltdpth(a5)		;dest.screen
	move.l	a0,bltapth(a5)		;source screen
	move.w	#36,bltamod(a5)
	move.w	#46,bltdmod(a5)
	move.w	#$ffff,bltafwm(a5)
	move.w	#$ffff,bltalwm(a5)
	move.w	#$09f0,bltcon0(a5)	;shifter
	move.w	#0,bltcon1(a5)
	clr.l	d0
	move.w	26(a6),d0	;heigh of font
	mulu	#64,d0
	add.w	#2,d0

	clr.l	d1
	clr.l	d3
	move.w	30(a6),d3	;no. of planes
planeblit:
	move.w	d0,bltsize(a5)
	move.w	28(a6),d1	;hoehe der dest.bmap
	mulu	#50,d1		;mul mit breite
	bsr	blitwait
	add.l	d1,a1
	add.l	#10240,a0	;immer lo-res fuer fontpage
	move.l	a1,bltdpth(a5)
	move.l	a0,bltapth(a5)
dbra	d3,planeblit
	
rts

blitwait:
	btst	#14,$dff002
	bne	blitwait
rts

blitline:
	move.w	#$8400,dmacon(a5)
	jsr	blitwait
	move.l	(a6),a0
	move.l	a0,bltapth(a5)
	move.l	a0,a1
	sub.l	#2,a1
	move.l	a1,bltdpth(a5)
	move.w	#0,bltamod(a5)
	move.w	#0,bltdmod(a5)
	move.w	#$0000,bltafwm(a5)
	move.w	#$ffff,bltalwm(a5)
	move.w	20(a6),bltcon0(a5)	;shifter
	move.w	#0,bltcon1(a5)
	clr.l	d0
	move.w	26(a6),d0	;heigh of font
	add.w	#1,d0
	mulu	#64,d0
	add.w	#25,d0

	clr.l	d1
	move.w	28(a6),d1	;hoehe der bmap
	mulu	#50,d1		;mul mit breite

	clr.l	d3
	move.w	30(a6),d3	;no. of planes
planecharblit:
	move.w	d0,bltsize(a5)
	add.l	d1,a0
	add.l	d1,a1
	bsr	blitwait
	move.l	a0,bltapth(a5)
	move.l	a1,bltdpth(a5)
dbra	d3,planecharblit
rts

newchar:
	move.l	16(a6),a0	;scrpointer in a0
	move.b	(a0)+,d0
	cmp.b	#0,d0		;end of scrtext ?
	beq	scrollbackset
	move.l	a0,16(a6)	;save new pointer
	bsr	findchar
rts

;************ SCROLL CONTROLLSEQUENCES *****************
down:
	move.l	#-50,scrolloffset
	move.l	#-1,scrolloffsetcounter
jmp	newchar
up:
	move.l	#50,scrolloffset
	move.l	#1,scrolloffsetcounter
jmp	newchar

slower:
	move.w	#32,22(a6)
	move.w	#$f9f0,32(a6)
jmp	newchar

slow:
	move.w	#16,22(a6)
	move.w	#$e9f0,32(a6)
jmp	newchar

middle:
	move.w	#8,22(a6)
	move.w	#$c9f0,32(a6)
jmp	newchar

fast:
	move.w	#4,22(a6)
	move.w	#$89f0,32(a6)
jmp	newchar

faster:
	move.w	#2,22(a6)
	move.w	#$09f0,32(a6)
jmp	newchar

stand:
	move.l	#$a88,waitkonst
	move.w	#150,screencounter
jmp	newchar


;*********************  I B I S ***************************
IBIS:
	movem.l	d0-d7/a1-a6,-(sp)

	move.l	#$dff000,a5
	move.w	#$8040,96(a5)	; DMA-ON

	lea	IBISBUFFER,a6	; initbuffer
	move.l	a0,a3		; save struct

move.l	#21,d0
ibiscopystruct:
	move.b	(a3)+,(a6)+
dbra	d0,ibiscopystruct
	move.w	#$ffff,(a6)+	;bltafwm
	move.w	#$0,(a6)+	;bltalwm
	move.w	#$0,(a6)+	;bltshifter

	lea	IBISBUFFER,a6
	move.l	a0,a3
	move.l	18(a6),a4	; Displaystruct

	move.w	2(a4),d0
	mulu	#8,d0		;width in pixels
	move.w	(a3),d1		; X-Coordinate in d1
	cmp.w	d0,d1		; vissible X-coord.?
	bhi	IBISENDE	;NO!
				;YES: check Y-coord.
	move.w	4(a4),d0
	move.w	2(a3),d1
	cmp.w	d0,d1
	bhi	IBISENDE

	move.l	10(a6),a1	; BOBSOURCE
	move.l	6(a4),a0	;dest. bmaps

	move.w	2(a6),d0	;y-pos des BOBS
	move.w	2(a4),d1
	mulu	d1,d0
	add.l	d0,a0

	move.l	#0,d0
	move.w	(a6),d0		;x-pos des bobs
	move.w	d0,d1
	divu	#16,d0		;nur words.....
	and.l	#$ff,d0
	add.l	d0,a0
	add.l	d0,a0		;zwei mal (words)

	and.w	#$000f,d1	;shifter wert
	mulu	#$1000,d1	;right pos.

	bsr	blitwait
	move.l	14(a6),bltapth(a5)	;MASK
	move.l	a1,bltbpth(a5)		;BOB
	move.l	a0,bltcpth(a5)		;BGROUND
	move.l	a0,bltdpth(a5)		;DESTINATION

	move.w	#$0fca,d0
	or.w	d1,d0
	move.w	d0,bltcon0(a5)
	move.w	#$0000,d0
	or.w	d1,d0
	move.w	d0,bltcon1(a5)

	move.w	#40,d0
	move.w	4(a6),d1
	add.w	#1,d1
	sub.w	d1,d0
	sub.w	d1,d0
	move.w	d0,bltamod(a5)
	move.w	d0,bltbmod(a5)

	move.w	2(a4),d0	;displaywidth----->d0 (Bytes! )
	move.w	4(a6),d1	;BobWidth--------->d1 (Words! )
	add.w	#1,d1		;shifterword
	sub.w	d1,d0
	sub	d1,d0		;2 x (words)
	move.w	d0,bltdmod(a5)	;dmod=dwidth-(bobwidth+1)
	move.w	d0,bltcmod(a5)

	move.w	22(a6),bltafwm(a5)
	move.w	24(a6),bltalwm(a5)
	move.w	6(a6),d0	;BOBheigh
	mulu	#64,d0
	add.w	4(a6),d0	;BOBwidth
	add.w	#1,d0		;   +1

move.w	8(a6),d1		;depht
deepblt:
	move.w	d0,bltsize(a5)
	bsr	blitwait

	move.w	2(a4),d2
	mulu	4(a4),d2
	add.l	d2,a0

	add.l	#10240,a1
	move.l	14(a6),bltapth(a5)
	move.l	a1,bltbpth(a5)
	move.l	a0,bltcpth(a5)
	move.l	a0,bltdpth(a5)
dbra	d1,deepblt

IBISENDE:
	movem.l	(sp)+,d0-d7/a1-a6
rts


cyclecolors:
	lea	logocol,a0
	lea	logocol,a1
	add.l	#198,a0
	add.l	#196,a1
	moveq	#99,d0
scrollcolor:
	move.l	(a1),(a0)
	sub.l	#2,a1
	sub.l	#2,a0
dbra	d0,scrollcolor

	lea	colordat,a0
	lea	logocol,a1
	move.l	actcolor,d0
	add.l	d0,a0
	move.w	(a0),2(a1)
	add.l	#2,d0
	cmp.l	#192,d0
	bne	cycleweiter
	move.l	#2,d0
cycleweiter:
	move.l	d0,actcolor
rts

	;d0:begin  d1:addmask d2: submask d3:counter  a0:dest.
fade:
	move.w	d0,(a0)+
	add.w	d1,d0
	sub.w	d2,d0
dbra	d3,fade
rts

makewabbles:
	sub.w	#1,wabblewait
	lea	calcwabbles,a0
	move.l	calcwabb,d0
	add.l	d0,a0
	lea	wabbles,a1
	move.w	(a0),192(a1)
	add.l	#2,d0
	cmp.l	#19696,d0
	bne	wabblenotready
	move.l	#0,d0
wabblenotready:
	move.l	d0,calcwabb
jmp	wabblesready

sprudel:
	lea	water,a0
	lea	water,a1
	add.l	#58,a1
	add.l	#56,a0
	move.w	#29,d0
copywater:
	move.w	(a0),(a1)
	sub.w	#2,a0
	sub.w	#2,a1
dbra	d0,copywater

	move.l	actwater,d0
	lea	waterdats,a0
	lea	water,a1
	add.l	d0,a0
	move.w	(a0),(a1)
	add.l	#2,d0
	cmp.l	#480,d0
	bne	sprudelready
	move.l	#0,d0
sprudelready:
	move.l	d0,actwater
rts

;******************************************************
;*                 Copper-Merge-Routine               *
;*                 a0:adr. der STRUKTUR               *
;******************************************************
COPMERGE:
	move.l	a0,a6		;struct ====> a6
	move.l	6(a6),a0	;destination in a0
	move.l	10(a6),a1	;zusatz in a1

	move.w	4(a6),d0	;wieviele zusatzlisten?
	move.l	a6,a5
	add.l	#14,a5		;begin der datenlisten in a5
	lea 	variable,a4	;variabelnbuffer(mind.3 X dat.)
copystruct:
	move.w	(a5)+,(a4)+	;register X moved,
	move.l	(a5)+,(a4)+	;addresse X moved
dbra	d0,copystruct

	move.w	(a6),d1		;waitzahler
	move.w	2(a6),d0	;lange
generatelist:
	move.w	d1,(a0)+	;wait in destination
	move.w	#$fffe,(a0)+
	move.w	(a1),d2		;wait from zlist in d2
	cmp.w	d1,d2		;both waits equal ?
	beq	intzlist
intdatlist:
	lea	variable,a5
	move.w	4(a6),d2	;how much listen ?
modidat:			;modify datlist
	move.w	(a5)+,(a0)+
	move.l	(a5),a4		;address of datlist x in a4
	move.w	(a4)+,(a0)+	;move 2.moveword to dest.
	move.l	a4,(a5)+	;address of datlist x saven
dbra	d2,modidat
	add.w	#$0100,d1
dbra	d0,generatelist

rts

intzlist:
	add.l	#2,a1		;1 word ueberspringen
	move.w	(a1)+,d2	;wieviele moves?
zustzmoves:
	move.l	(a1)+,(a0)+
dbra	d2,zustzmoves
jmp	intdatlist


initscreens:
	lea	stardisplay,a0
	bsr	initplayfield

	lea	logodisplay,a0
	bsr	initplayfield

	lea	scrolldisplay,a0
	bsr	initplayfield


	move.l	#logoplane+30720,a1
	move.l	#logocolor,a0
	move.w	#7,d0
	move.w	#$0180,d1
	bsr	setcolor

	move.l	#font+30720,a1
	move.l	#bobcolor,a0
	move.w	#7,d0
	move.w	#$0190,d1
	bsr	setcolor

	lea	tubefx,a0
	bsr	copmerge
rts

initcolors:
	lea	colordat,a0

	move.w	#$000f,d0
	move.w	#$0010,d1
	move.w	#$0000,d2
	move.w	#$f,d3
	bsr	fade
	move.w	#$00ff,d0
	move.w	#$0000,d1
	move.w	#$0001,d2
	move.w	#$f,d3
	bsr	fade
	move.w	#$00f0,d0
	move.w	#$0100,d1
	move.w	#$0000,d2
	move.w	#$f,d3
	bsr	fade
	move.w	#$0ff0,d0
	move.w	#$0000,d1
	move.w	#$0010,d2
	move.w	#$f,d3
	bsr	fade
	move.w	#$0f00,d0
	move.w	#$0001,d1
	move.w	#$0000,d2
	move.w	#$f,d3
	bsr	fade
	move.w	#$0f0f,d0
	move.w	#$0000,d1
	move.w	#$0100,d2
	move.w	#$f,d3
	bsr	fade

	lea	tubecol0,a0
	move.w	#$0500,d0
	move.w	#$0100,d1
	move.w	#$0000,d2
	move.w	#$8,d3
	bsr	fade
	move.w	#$0f00,d0
	move.w	#$0044,d1
	move.w	#$0000,d2
	move.w	#$3,d3
	bsr	fade
	move.w	#$0fff,d0
	move.w	#$0000,d1
	move.w	#$0011,d2
	move.w	#$f,d3
	bsr	fade
	move.w	#$0f00,d0
	move.w	#$0000,d1
	move.w	#$0100,d2
	move.w	#$e,d3
	bsr	fade

	lea	tubecol1,a0
	move.w	#$0005,d0
	move.w	#$0002,d1
	move.w	#$0000,d2
	move.w	#$4,d3
	bsr	fade
	move.w	#$000f,d0
	move.w	#$0220,d1
	move.w	#$0000,d2
	move.w	#$7,d3
	bsr	fade
	move.w	#$0fff,d0
	move.w	#$0000,d1
	move.w	#$0110,d2
	move.w	#$e,d3
	bsr	fade
	move.w	#$000f,d0
	move.w	#$0000,d1
	move.w	#$0001,d2
	move.w	#$e,d3
	bsr	fade
rts

; -----------------------------------------------------
; ------- D.O.C Soundtracker V2.3 - playroutine -------
; -----------------------------------------------------
; ---- Improved and optimized by  Unknown of D.O.C ----
; --------- Based on the playroutine from TJC ---------
; -----------------------------------------------------

mt_init:lea	mt_data,a0
	add.l	#$03b8,a0
	moveq	#$7f,d0
	moveq	#0,d1
mt_init1:
	move.l	d1,d2
	subq.w	#1,d0
mt_init2:
	move.b	(a0)+,d1
	cmp.b	d2,d1
	bgt.s	mt_init1
	dbf	d0,mt_init2
	addq.b	#1,d2

mt_init3:
	lea	mt_data,a0
	lea	mt_sample1(pc),a1
	asl.l	#8,d2
	asl.l	#2,d2
	add.l	#$438,d2
	add.l	a0,d2
	moveq	#$1e,d0
mt_init4:
	move.l	d2,(a1)+
	moveq	#0,d1
	move.w	42(a0),d1
	asl.l	#1,d1
	add.l	d1,d2
	add.l	#$1e,a0
	dbf	d0,mt_init4

	lea	mt_sample1(PC),a0
	moveq	#0,d0
mt_clear:
	move.l	(a0,d0.w),a1
	clr.l	(a1)
	addq.w	#4,d0
	cmp.w	#$7c,d0
	bne.s	mt_clear

	clr.w	$dff0a8
	clr.w	$dff0b8
	clr.w	$dff0c8
	clr.w	$dff0d8
	clr.l	mt_partnrplay
	clr.l	mt_partnote
	clr.l	mt_partpoint

	move.b	mt_data+$3b6,mt_maxpart+1
	rts

mt_end:	clr.w	$dff0a8
	clr.w	$dff0b8
	clr.w	$dff0c8
	clr.w	$dff0d8
	move.w	#$f,$dff096
	rts

mt_music:
	addq.w	#1,mt_counter
mt_cool:cmp.w	#6,mt_counter
	bne.s	mt_notsix
	clr.w	mt_counter
	bra	mt_rout2

mt_notsix:
	lea	mt_aud1temp(PC),a6
	tst.b	3(a6)
	beq.s	mt_arp1
	lea	$dff0a0,a5		
	bsr.s	mt_arprout
mt_arp1:lea	mt_aud2temp(PC),a6
	tst.b	3(a6)
	beq.s	mt_arp2
	lea	$dff0b0,a5
	bsr.s	mt_arprout
mt_arp2:lea	mt_aud3temp(PC),a6
	tst.b	3(a6)
	beq.s	mt_arp3
	lea	$dff0c0,a5
	bsr.s	mt_arprout
mt_arp3:lea	mt_aud4temp(PC),a6
	tst.b	3(a6)
	beq.s	mt_arp4
	lea	$dff0d0,a5
	bra.s	mt_arprout
mt_arp4:rts

mt_arprout:
	move.b	2(a6),d0
	and.b	#$0f,d0
	tst.b	d0
	beq	mt_arpegrt
	cmp.b	#$01,d0
	beq.s	mt_portup
	cmp.b	#$02,d0
	beq.s	mt_portdwn
	cmp.b	#$0a,d0
	beq.s	mt_volslide
	rts

mt_portup:
	moveq	#0,d0
	move.b	3(a6),d0
	sub.w	d0,22(a6)
	cmp.w	#$71,22(a6)
	bpl.s	mt_ok1
	move.w	#$71,22(a6)
mt_ok1:	move.w	22(a6),6(a5)
	rts

mt_portdwn:
	moveq	#0,d0
	move.b	3(a6),d0
	add.w	d0,22(a6)
	cmp.w	#$538,22(a6)
	bmi.s	mt_ok2
	move.w	#$538,22(a6)
mt_ok2:	move.w	22(a6),6(a5)
	rts

mt_volslide:
	moveq	#0,d0
	move.b	3(a6),d0
	lsr.b	#4,d0
	tst.b	d0
	beq.s	mt_voldwn
	add.w	d0,18(a6)
	cmp.w	#64,18(a6)
	bmi.s	mt_ok3
	move.w	#64,18(a6)
mt_ok3:	move.w	18(a6),8(a5)
	rts
mt_voldwn:
	moveq	#0,d0
	move.b	3(a6),d0
	and.b	#$0f,d0
	sub.w	d0,18(a6)
	bpl.s	mt_ok4
	clr.w	18(a6)
mt_ok4:	move.w	18(a6),8(a5)
	rts

mt_arpegrt:
	move.w	mt_counter(PC),d0
	cmp.w	#1,d0
	beq.s	mt_loop2
	cmp.w	#2,d0
	beq.s	mt_loop3
	cmp.w	#3,d0
	beq.s	mt_loop4
	cmp.w	#4,d0
	beq.s	mt_loop2
	cmp.w	#5,d0
	beq.s	mt_loop3
	rts

mt_loop2:
	moveq	#0,d0
	move.b	3(a6),d0
	lsr.b	#4,d0
	bra.s	mt_cont
mt_loop3:
	moveq	#$00,d0
	move.b	3(a6),d0
	and.b	#$0f,d0
	bra.s	mt_cont
mt_loop4:
	move.w	16(a6),d2
	bra.s	mt_endpart
mt_cont:
	add.w	d0,d0
	moveq	#0,d1
	move.w	16(a6),d1
	lea	mt_arpeggio(PC),a0
mt_loop5:
	move.w	(a0,d0),d2
	cmp.w	(a0),d1
	beq.s	mt_endpart
	addq.l	#2,a0
	bra.s	mt_loop5
mt_endpart:
	move.w	d2,6(a5)
	rts

mt_rout2:
	lea	mt_data,a0
	move.l	a0,a3
	add.l	#$0c,a3
	move.l	a0,a2
	add.l	#$3b8,a2
	add.l	#$43c,a0
	move.l	mt_partnrplay(PC),d0
	moveq	#0,d1
	move.b	(a2,d0),d1
	asl.l	#8,d1
	asl.l	#2,d1
	add.l	mt_partnote(PC),d1
	move.l	d1,mt_partpoint
	clr.w	mt_dmacon

	lea	$dff0a0,a5
	lea	mt_aud1temp(PC),a6
	bsr	mt_playit
	lea	$dff0b0,a5
	lea	mt_aud2temp(PC),a6
	bsr	mt_playit
	lea	$dff0c0,a5
	lea	mt_aud3temp(PC),a6
	bsr	mt_playit
	lea	$dff0d0,a5
	lea	mt_aud4temp(PC),a6
	bsr	mt_playit
	move.w	#$01f4,d0
mt_rls:	dbf	d0,mt_rls

	move.w	#$8000,d0
	or.w	mt_dmacon,d0
	move.w	d0,$dff096

	lea	mt_aud4temp(PC),a6
	cmp.w	#1,14(a6)
	bne.s	mt_voice3
	move.l	10(a6),$dff0d0
	move.w	#1,$dff0d4
mt_voice3:
	lea	mt_aud3temp(PC),a6
	cmp.w	#1,14(a6)
	bne.s	mt_voice2
	move.l	10(a6),$dff0c0
	move.w	#1,$dff0c4
mt_voice2:
	lea	mt_aud2temp(PC),a6
	cmp.w	#1,14(a6)
	bne.s	mt_voice1
	move.l	10(a6),$dff0b0
	move.w	#1,$dff0b4
mt_voice1:
	lea	mt_aud1temp(PC),a6
	cmp.w	#1,14(a6)
	bne.s	mt_voice0
	move.l	10(a6),$dff0a0
	move.w	#1,$dff0a4
mt_voice0:
	move.l	mt_partnote(PC),d0
	add.l	#$10,d0
	move.l	d0,mt_partnote
	cmp.l	#$400,d0
	bne.s	mt_stop
mt_higher:
	clr.l	mt_partnote
	addq.l	#1,mt_partnrplay
	moveq	#0,d0
	move.w	mt_maxpart(PC),d0
	move.l	mt_partnrplay(PC),d1
	cmp.l	d0,d1
	bne.s	mt_stop
	clr.l	mt_partnrplay
mt_stop:tst.w	mt_status
	beq.s	mt_stop2
	clr.w	mt_status
	bra.s	mt_higher
mt_stop2:
	rts

mt_playit:
	move.l	(a0,d1.l),(a6)
	addq.l	#4,d1
	moveq	#0,d2
	move.b	2(a6),d2
	and.b	#$f0,d2
	lsr.b	#4,d2

	move.b	(a6),d0
	and.b	#$f0,d0
	or.b	d0,d2
	tst.b	d2
	beq.s	mt_nosamplechange

	moveq	#0,d3
	lea	mt_samples(PC),a1
	move.l	d2,d4
	asl.l	#2,d2
	mulu	#$1e,d4
	move.l	(a1,d2),4(a6)
	move.w	(a3,d4.l),8(a6)
	move.w	2(a3,d4.l),18(a6)
	move.w	4(a3,d4.l),d3
	tst.w	d3
	beq.s	mt_displace
	move.l	4(a6),d2
	add.l	d3,d2
	move.l	d2,4(a6)
	move.l	d2,10(a6)
	move.w	6(a3,d4.l),8(a6)
	move.w	6(a3,d4.l),14(a6)
	move.w	18(a6),8(a5)
	bra.s	mt_nosamplechange

mt_displace:
	move.l	4(a6),d2
	add.l	d3,d2
	move.l	d2,10(a6)
	move.w	6(a3,d4.l),14(a6)
	move.w	18(a6),8(a5)
mt_nosamplechange:
	tst.w	(a6)
	beq.s	mt_retrout
	move.w	(a6),16(a6)
	move.w	20(a6),$dff096
	move.l	4(a6),(a5)
	move.w	8(a6),4(a5)
	move.w	(a6),6(a5)
	move.w	20(a6),d0
	or.w	d0,mt_dmacon

mt_retrout:
	tst.w	(a6)
	beq.s	mt_nonewper
	move.w	(a6),22(a6)

mt_nonewper:
	move.b	2(a6),d0
	and.b	#$0f,d0
	cmp.b	#$0b,d0
	beq.s	mt_posjmp
	cmp.b	#$0c,d0
	beq.s	mt_setvol
	cmp.b	#$0d,d0
	beq.s	mt_break
	cmp.b	#$0e,d0
	beq.s	mt_setfil
	cmp.b	#$0f,d0
	beq.s	mt_setspeed
	rts

mt_posjmp:
	not.w	mt_status
	moveq	#0,d0
	move.b	3(a6),d0
	subq.b	#1,d0
	move.l	d0,mt_partnrplay
	rts

mt_setvol:
	move.b	3(a6),8(a5)
	rts

mt_break:
	not.w	mt_status
	rts

mt_setfil:
	moveq	#0,d0
	move.b	3(a6),d0
	and.b	#1,d0
	rol.b	#1,d0
	and.b	#$fd,$bfe001
	or.b	d0,$bfe001
	rts

mt_setspeed:
	move.b	3(a6),d0
	and.b	#$0f,d0
	beq.s	mt_back
	clr.w	mt_counter
	move.b	d0,mt_cool+3
mt_back:rts

mt_aud1temp:
	blk.w	10,0
	dc.w	1
	blk.w	2,0
mt_aud2temp:
	blk.w	10,0
	dc.w	2
	blk.w	2,0
mt_aud3temp:
	blk.w	10,0
	dc.w	4
	blk.w	2,0
mt_aud4temp:
	blk.w	10,0
	dc.w	8
	blk.w	2,0

mt_partnote:	dc.l	0
mt_partnrplay:	dc.l	0
mt_counter:	dc.w	0
mt_partpoint:	dc.l	0
mt_samples:	dc.l	0
mt_sample1:	blk.l	31,0
mt_maxpart:	dc.w	0
mt_dmacon:	dc.w	0
mt_status:	dc.w	0

mt_arpeggio:
	dc.w $0358,$0328,$02fa,$02d0,$02a6,$0280,$025c
	dc.w $023a,$021a,$01fc,$01e0,$01c5,$01ac,$0194,$017d
	dc.w $0168,$0153,$0140,$012e,$011d,$010d,$00fe,$00f0
	dc.w $00e2,$00d6,$00ca,$00be,$00b4,$00aa,$00a0,$0097
	dc.w $008f,$0087,$007f,$0078,$0071,$0000,$0000,$0000



;******************************************************
;                DATENBEREICHE UND STRUKTUREN       
;******************************************************

stardisplay:
	dc.w	$6400	; depht,modes(bitbelegung wie $dff100)
	dc.w	50	; width (in bytes)
	dc.w	256	; heigh
	dc.l	starplane; pointer (bitmaps)
	dc.l	stars	; copperbuffer
	dc.w	$00e4	; modulo
	dc.w	2	; depht(dez.zahl)

logodisplay:
	dc.w	$6400	; depht,modes(bitbelegung wie $dff100)
	dc.w	40	; width (in bytes)
	dc.w	256	; heigh
	dc.l	logoplane; pointer (bitmaps)
	dc.l	logo	; copperbuffer
	dc.w	$00e0	; modulo
	dc.w	2	; depht(dez.zahl)

scrolldisplay:
	dc.w	$6400	; depht,modes(bitbelegung wie $dff100)
	dc.w	50	; width (in bytes)
	dc.w	100	; heigh
	dc.l	scrollplane+3000; pointer (bitmaps)
	dc.l	scroll	; copperbuffer
	dc.w	$00e0	; modulo
	dc.w	2	; depht(dez.zahl)

tubedisplay:
	dc.w	$2400	; depht,modes(bitbelegung wie $dff100)
	dc.w	0	; width (in bytes)
	dc.w	512	; heigh
	dc.l	tubeplane; pointer (bitmaps)
	dc.l	tube	; copperbuffer
	dc.w	$00e0	; modulo
	dc.w	1	; depht(dez.zahl)

logocoppfx:
	dc.w	$2709	;startwait
	dc.w	98	;lenght
	dc.w	1	;datenlisten
	dc.l	logocopper	;dest.
	dc.l	leer	;zusatzliste
	dc.w	$0102
	dc.l	wabbles
	dc.w	$018c
	dc.l	logocol

waterfx:
	dc.w	$a509	;startwait
	dc.w	25	;lenght
	dc.w	2	;datenlisten
	dc.l	mirrorwater	;dest.
	dc.l	leer	;zusatzliste
	dc.w	$0108
	dc.l	water
	dc.w	$010a
	dc.l	water
	dc.w	$018e
	dc.l	lettercolors
tubefx:
	dc.w	$ce09	;startwait
	dc.w	48	;lenght
	dc.w	5	;datenlisten
	dc.l	tubecopper;dest.
	dc.l	leer	;zusatzliste
	dc.w	$0108
	dc.l	tubemods1
	dc.w	$010a
	dc.l	tubemods1
	dc.w	$0102
	dc.l	tubecorner
	dc.w	$0180
	dc.l	tubecol0
	dc.w	$0182
	dc.l	tubecol1
	dc.w	$0192
	dc.l	tubecol1

scrollstruct:		;V 1.2
	dc.l	scrollplane+3000;ausgabescreen(immer 50 bytes breit)
	dc.l	font	;source screen(jeder buchstabe 2 words)
	dc.l	translate	; translationstring
	dc.l	message	;text
	dc.l	message	;actuelle scrollcharpointer
	dc.w	$c9f0	;speed (siehe BLTCON0!)
	dc.w	8	;wait for next char
	dc.w	8	;default
	dc.w	25	;hoehe
	dc.w	100	;screen heigh
	dc.w	2	;depht
	dc.w	$c9f0

TRANSLATE:
	dc.b	'ABCDEFGHIJ'	;t= D.I.D
	dc.b	'KLMNOPQRST'	;m= MUZAK
	dc.b	'UVWXYZ!?:;'	;g= GFX
	dc.b	'0123456789'	;c= CODE
	dc.b	'"(),-.^&cm'
	dc.b	'gz',0
MESSAGE:
	dc.b	' x  HELLO   DIRK    s HIER IST MEIN NEUES '
	dc.b	't    INTRO    us   WEITERE INFOS STEHEN IN'
	DC.B	' ASCII AUF DER DISK...DEIN INTRO IST O.K ABER '
	dc.b	'WO BLEIBT DIE vMUSIK??  s      '
	dc.b	'yDER TEXT '
	dc.b	'BESCHREIBT DIE ENTSTEHUNGSGESCHICHTE DISES INTROS '
	dc.b	'DOCH HIER ERSTMAL DIE   t   z       CREDITS  w us'
	DC.B	'IOT PRESENTS A NEW INTRO...w.MOVEv YOUR MOUSE!!'
	dc.b	'x CODE BY      t z    INFONAUT w us  '
	dc.b	'GRAPHIX BY      t z  '
	dc.b	' CERBERUS w us (TUBE PIC)  &     t z  INFONAUT w'
	dc.b	' us (LOGO PIC)    '
	dc.b	'MUSIC BY    t z  XXXXXXX  w us '
	dc.b	'xAND NOW HERE COMES THE HISTORY OF THIS DEMO...'
	dc.b	'zHERE IS INFONAUT WITHt A     NEW '
	dc.b	'INTRO. us..ITy IS 3:33:33(NO JOKE!) '
	dc.b	'AM 4TH JUNE 1990.... '
	dc.b	'xTHIS DEMO IS FULLY RECODED BY '
	dc.b	'INFONAUT IN ONLY 2.5 HOURS! '
	DC.B	'AT THIS TIME THERE AREw NO WATER-WOBBLES, '
	DC.B	'MOUSE-CONTROLLED WOBBLES, COPPERCYCLE-EFFECTS '
	DC.B	'& MODULO TUBES ONLY THE MIRROR-EFFECT IS THERE.'
	DC.B	'..NOT BAD FOR 2.5 HOURS EHH ?'
	dc.b	'v HOW IT IS POSSIBLE? '
	DC.B	'xTHE DEMO WAS CREATED AND CODED BY t   TECHNO   us'
	DC.B	'OF WILDFIRE BUT HE FAILED TO PROGRAM A SCROLLER '
	DC.B	'SO HE ASKED ME TO PROGRAM HIM ONE '
	DC.B	'I SAID y" OK BOY I TAKE IT HOME AND LOOK WHAT I '
	DC.B	'CAN DO FOR YOU.."x..BUT AS I SAW THE SOURCE I '
	DC.B	'STARTED TO PROGRAM PART AFTER PART NEW TO INSERT '
	DC.B	'MYv UNIVERSAL-SCROLLER.xI WONDER MYSELF THAT THERE '
	DC.B	'ARE NO BUGS IN THE CODE BUT NOW I HAVE TO INSERT '
	DC.B	'THE LAST COPPERFX^S TO MAKE IT PERFECT!.......'
	DC.B	'zOH WHAT IS THIS ?x NOW WE HAVE THE 10TH OF JULY! '
	DC.B	'(TIME PASSES VERY FAST) MY CLOCK SAYS THAT WE HAVE '
	DC.B	'11:27:16 PM I HAVE INSERTED THE MOUSEWABBLE AND '
	DC.B	'THE COPPERCYCLE IN THE LOGO'
	dc.b	'y WILDFIREx IS LAMwE THEY AREx SOURCE-CODE-THIEFS!!'
	DC.B	' SO I DECIDED TO INSERT NEW GFX AND SFX TO MAKE MY '
	DC.B	'OWN NEW INTRO!!!'
	dc.b	' NOW I HAVE TO '
	DC.B	'CODE THE WATER-EFFECT (DONE IN THE NIGHT FROM '
	DC.B	'10TH TO 11TH OF JULY )'
	DC.B	'  THE FLIPPED TUBES  (ONLY FAT TUBES DONE ON '
	DC.B	'SATURDAY THE 28TH OF JULY)'
	DC.B	'A ROUTINE WHICH GENERATE DIFFERENT WABBLES IF '
	DC.B	'THE MOUSE IS NOT USED (DONE IN THE NIGHT FROM 10TH '
	DC.B	'TO 11TH OF JULY, TOO)  '
	DC.B	'&  A SCROLLROUTINE FOR A BACKGROUNDLOGO.(NOT DONE)' 
	DC.B	'  OF COURSE I HAVE TO INSERT DIFFERENT '
	DC.B	'SCROLLSPEED AND SOME OTHER STANDARDS ,TOO '
	DC.B	' I AM GLAD WHEN IT IS OVER!!!'
	DC.B	' TODAY WE HAVE SATURDAY 28.7.90 AND I HAVE FINISHED '
	DC.B	'THE TUBE THERE WON^T BE ANY BACKGROUNDLOGO, BUT '
	DC.B	'SOME NICE BALLS ALLRIGHT??? '
	dc.b	'I HAVE JUST FINISHED THE BALLS (SUNDAY 5.8.90 '
	DC.B	'21:40 PM) I CODE ON THIS INTRO NEARLY 2 MONTHS!!!'
	DC.B	'TODAY WE HAVE SUNDAY 12.8.90 (04.16.00 PM) I HAVE'
	DC.B	' JUST INSERTED THE zSyCxRwOvLwLxEFFECTS LIKE ' 
	dc.b	'THIS NICEt DIVINGu AND   z RACING xt.SCROLLY...us '
	dc.b	'I THINK NOW IT IS READY!!!.t GOOD BYE!! us..'
	DC.B	0
even

BOBBY:
	dc.w	0	; x-pos
	dc.w	0	; y-pos
	dc.w	2	; width
	dc.w	32	; heigh
	dc.w	2	; depht
	dc.l	font+6328	; SOURCE (immer Lo-res)
	dc.l	MASK+6328	; Maske
	dc.l	stardisplay	; destination
	dc.w	0
	dc.w	0
	dc.b	1
	dc.b	3

BOBBY2:
	dc.w	0	; x-pos
	dc.w	0	; y-pos
	dc.w	2	; width
	dc.w	32	; heigh
	dc.w	2	; depht
	dc.l	font+6324	; SOURCE (immer Lo-res)
	dc.l	MASK+6324	; Maske
	dc.l	stardisplay	; destination
	dc.w	10
	dc.w	50
	dc.b	1
	dc.b	3

BOBBY3:
	dc.w	0	; x-pos
	dc.w	0	; y-pos
	dc.w	2	; width
	dc.w	32	; heigh
	dc.w	2	; depht
	dc.l	font+6320	; SOURCE (immer Lo-res)
	dc.l	MASK+6320	; Maske
	dc.l	stardisplay	; destination
	dc.w	20
	dc.w	100
	dc.b	1
	dc.b	3

BOBBY4:
	dc.w	0	; x-pos
	dc.w	0	; y-pos
	dc.w	2	; width
	dc.w	32	; heigh
	dc.w	2	; depht
	dc.l	font+3880	; SOURCE (immer Lo-res)
	dc.l	MASK+3880	; Maske
	dc.l	stardisplay	; destination
	dc.w	60
	dc.w	150
	dc.b	1
	dc.b	2

BOBBY5:
	dc.w	0	; x-pos
	dc.w	0	; y-pos
	dc.w	2	; width
	dc.w	32	; heigh
	dc.w	2	; depht
	dc.l	font+6320	; SOURCE (immer Lo-res)
	dc.l	MASK+3880	; Maske
	dc.l	stardisplay	; destination
	dc.w	0
	dc.w	200
	dc.b	1
	dc.b	2

IBISBUFFER:
	blk.b	50,0	;Savety copy of bobstruct


gfxname:
	dc.b	"graphics.library",0


even
screencounter:
	dc.w	0
waitkonst:
	dc.l	$a88

scrolloffset:		;+50 oder -50
	dc.l	0
scrolltouchcounter:	;30......0  (anzahl der lines)
	dc.l	29
scrolloffsetcounter:
	dc.l	0	; +1 oder -1 
;********************* WABBLES *************************
wabbles:
	blk.w	100,0
xcoord:
	dc.w	0
wabblecount:
	dc.w	0
oldwabble:
	dc.w	0
wabblewait:
	dc.w	0
calcwabb:
	dc.l	0
calcwabbles:
	blk.b	19696,0

;********************** COPPER-CYCLE ********************
logocol:
	blk.w	100,0
colordat:
	blk.w	500,0
leer:
	dc.w	$ff09,1,$0180,$0000
variable:
	blk.l	100
actcolor:
	dc.l	0
x:
	dc.w	0
y:
	dc.w	0
oldx:
	dc.b	0
oldy:
	dc.b	0
;************************* WATER FX ***********************
lettercolors:
	dc.w	$00ff,$00ff,$00ff,$00ff
	dc.w	$00ef,$00df,$00cf,$00bf
	dc.w	$00af,$009f,$008f,$007f
	dc.w	$006f,$005f,$004f,$003f
	dc.w	$002f,$001f,$000f,$000f
	dc.w	$000f,$000f,$000f,$000f
	dc.w	$000f,$000f
water:
	dc.w	-90,-90,-90,-90,-90
	dc.w	-90,-90,-90,-90,-90
	dc.w	-90,-90,-90,-90,-90
	dc.w	-90,-90,-90,-90,-90
	dc.w	-90,-90,-90,-90,-90
	dc.w	-90,-90,-90,-90,-90
waterdats:
	dc.w	-90, -90, -90, -90, -40
	dc.w	-90, -90, -90, -90, -90
	dc.w	-90, -90, -90, -90,-140
	dc.w	-90, -90, -90, -90, -90

	dc.w	-90, -90, -90, -90, -40
	dc.w	-90, -90, -90, -90, -90
	dc.w	-90, -90, -90, -90,-140
	dc.w	-90, -90, -90, -90, -90


	dc.w	-90, -90, -90, -40, -40
	dc.w	-90, -40, -90, -90, -90
	dc.w	-90,-140, -90,-140,-140
	dc.w	-90, -90, -90, -90, -90

	dc.w	-90, -40, -90, -90, -40
	dc.w	-90, -90, -90, -40, -40
	dc.w	-90, -40, -90, -90, -90
	dc.w	-90,-140, -90,-140,-140

	dc.w	-90, -90, -90, -90, -90
	dc.w	-90, -40, -90, -90, -40
	dc.w	-90, -90, -90, -40, -40
	dc.w	-90, -40, -90, -90, -90

	dc.w	-90,-140, -90, -140,-140
	dc.w	-90, -90, -90, -40, -40
	dc.w	-90, -40, -90, -90, -90
	dc.w	-90,-140, -90,-140,-140

	dc.w	-90, -90, -90, -90, -90
	dc.w	-90, -40, -90, -90, -40
	dc.w	-90, -90, -90, -40, -40
	dc.w	-90, -40, -90, -90, -90

	dc.w	-90,-140, -90,-140,-140
	dc.w	-90, -90, -90, -90, -90
	dc.w	-90, -40, -90, -90, -40
	dc.w	-90, -90, -90, -40, -40

	dc.w	-90, -40, -90, -90, -90
	dc.w	-90,-140, -90, -140,-140
	dc.w	-90, -90, -90, -90, -90
	dc.w	-90, -40, -90, -90, -40

	dc.w	-90, -90, -90, -90, -40
	dc.w	-90, -90, -90, -90, -90
	dc.w	-90, -90, -90, -90,-140
	dc.w	-90, -90, -90, -90, -90

	dc.w	-90, -90, -90, -90, -40
	dc.w	-90, -90, -90, -90, -90
	dc.w	-90, -90, -90, -90,-140
	dc.w	-90, -90, -90, -90, -90

	dc.w	-90, -90, -90, -90, -40
	dc.w	-90, -90, -90, -90, -90
	dc.w	-90, -90, -90, -90,-140
	dc.w	-90, -90, -90, -90, -90

actwater:
	dc.l	0

;************************* TUBE ********************************

tubemods1:
	dc.w	464,128,86,86,86,2,2,2,2,2
	dc.w	2,2,2,2,2,2,2,2,2,2
	dc.w	2,2,2,2,2,2,2,2,2,2
	dc.w	2,2,2,2,2,86,86,86,128,464
	dc.w	2,2,2,2,2,2,2,2,2,2

tubecorner:
	dc.w	$0088,$0088,$0088,$0088,$0088
	dc.w	$0088,$0088,$0088,$0088,$0088
	dc.w	$0088,$0088,$0079,$0079,$0079
	dc.w	$0079,$0079,$006a,$006a,$006a
	dc.w	$006a,$006a,$0079,$0079,$0079

	dc.w	$0088,$0088,$0088,$0088,$0088
	dc.w	$0088,$0088,$0088,$0088,$0088
	dc.w	$0088,$0088,$0088,$0088,$0088
	dc.w	$0088,$0088,$0088,$0088,$0088
	dc.w	$0088,$0088,$0088,$0088,$0088

tubecol0:
	blk.w	100,0
tubecol1:
	blk.w	100,0



gfxbase:
	dc.l	0
oldcopper:
	dc.l	0
tubecounter:
	dc.w	0
newcopper:
;	dc.l	0
	dc.w	$0180,$0000,$0102,$0000
	dc.w	$008e,$2c61,$0090,$74c1
	dc.w	$0092,$0038,$0094,$00d0
	dc.w	$0102,$0000,$0104,$0040
	dc.w	$0108,$0000,$010a,10
stars:
	blk.w	30,$00ac
logo:
	blk.w	30,$00ac
logocolor:
	blk.w	16,$00ac
bobcolor:
	blk.w	16,$00ac
logocopper:
	blk.w	600,$00ac	;98 * 2 wait * 2 wobble * 2 color
	dc.w	$8b09,$fffe,$0108,$000a,$0102,$0000
	dc.w	$0182,$0fff,$0184,$0ddd
	dc.w	$0186,$0bbb,$0188,$0999
	dc.w	$018a,$0777,$018c,$0555
	dc.w	$018e,$0333
	dc.w	$8c09,$fffe,$0104,$0000
scroll:
	blk.w	30,$00ac
	dc.w	$8e09,$fffe,$018e,$00f0
	dc.w	$8f09,$fffe,$018e,$01f1
	dc.w	$9009,$fffe,$018e,$02f2
	dc.w	$9109,$fffe,$018e,$03f3
	dc.w	$9209,$fffe,$018e,$04f4
	dc.w	$9309,$fffe,$018e,$05f5
	dc.w	$9409,$fffe,$018e,$06f6
	dc.w	$9509,$fffe,$018e,$07f7
	dc.w	$9609,$fffe,$018e,$08f8
	dc.w	$9709,$fffe,$018e,$09f9
	dc.w	$9809,$fffe,$018e,$0afa
	dc.w	$9909,$fffe,$018e,$0bfb
	dc.w	$9a09,$fffe,$0180,$000f,$018e,$0cfc
	dc.w	$9b09,$fffe,$018e,$0dfd
	dc.w	$9c09,$fffe,$018e,$0efe
	dc.w	$9d09,$fffe,$018e,$0fff
	dc.w	$a409,$fffe,$0108,-90
	dc.w	$0182,$088f,$0184,$066d
	dc.w	$0186,$055b,$0188,$0449
	dc.w	$018a,$0447,$018c,$0335
	dc.w	$018e,$0223
	dc.w	$0192,$077f,$0194,$077d
	dc.w	$0196,$077b,$0198,$0779
	dc.w	$019a,$0557,$019c,$0335
	dc.w	$019e,$0223
mirrorwater:
	blk.w	250,$00ac	
	dc.w	$bf09,$fffe
	dc.w	$0180,$0000,$0100,$0000
	dc.w	$cc09,$fffe
	dc.w	$0108,$0002,$010a,$0002
	dc.w	$0192,$0000,$0182,$0000
	dc.w	$cd09,$fffe
tube:
	blk.w	30,$00ac
tubecopper:
	blk.l	1000,$00ac
	dc.w	$ff09,$fffe,$0182,$0000,$0192,$0000
	dc.w	0,0

coordinates:
	blk.b	260,0
starplane:	
	blk.b	38400,$00
logoplane:
	blk.b	32272,$00
scrollplane:
	blk.b	15000,$0
tubeplane:
	blk.b	10752,$0
secondtube:
	blk.b	10752,$0
font:
	blk.b	30736,0
MASK:
	blk.b	10240,$00

mt_data:	blk.b	28956,0

